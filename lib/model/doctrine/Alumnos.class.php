<?php

/**
 * Alumnos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sig
 * @subpackage model
 * @author     Ultima Modificacion: Guillermo A. Zdanowicz
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Alumnos extends BaseAlumnos
{	
	
	// Obtiene la ultima materia correlativa aprobada para registrar en equivalencias
	public function obtenerUltimaCorrelativaAprobada($idmateriaplan)
	{
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT
				am.fecha
			FROM
				correlatividades co
			INNER JOIN catedras ca ON co.idmateriaplanc=ca.idmateriaplan
			INNER JOIN alu_mat am ON ca.idcatedra=am.idcatedra
			WHERE co.idmateriaplan=".$idmateriaplan."
				and co.idmateriaplanc != co.idmateriaplan
				and co.situacion = 'R'
				and co.condicion = 'A'
				and am.idalumno = ".$this->getIdalumno()."
				and am.idestadomateria = 9
			ORDER BY am.fecha desc
			LIMIT 1
    	");
		
		return $q[0]['fecha'];
	}
		
	// Obtiene la ultima solicitud de libredeuda
	public function obtenerUltimaSolicitudLibredeuda()
	{
		$q = Doctrine_Query::create()
			->select('s.*')
			->from('SolicitudesLibredeuda s')
			->where('s.idalumno = ?', $this->getIdalumno())
			->orderBy('s.id DESC');
	
		return $q->fetchOne();
	}
	
	// Verifica si el alumno entrego la encuesta
	public function obtenerUltimaEncuestaEntregada($idencuesta)
	{
		$q = Doctrine_Query::create()
		->select('ea.*')
		->from('EncuestasAlumnos ea')
		->where('ea.idalumno = ?', $this->getIdalumno())
		->andWhere('ea.idencuesta = ?', $idencuesta)
		->orderBy('ea.idencuesta DESC');
	
		return $q->fetchOne();
	}
		
	// Obtiene la ultima mesa de examen aprobada de alumno
	public function obtenerUltimoMesaAprobada() 
	{
		$q = Doctrine_Query::create()
		    ->select('e.idmesaexamen as idmesaexamen, m.fecha as fecha')
    		->from('Examenes e')
    		->innerjoin('e.MesasExamenes m on e.idmesaexamen=m.idmesaexamen')
        	->where('e.idalumno = '.$this->getIdalumno())
        	->orderBy('m.fecha DESC');
		
		return $q->fetchOne();
    }
    
	// Obtiene la ultima estado de alumno
	public function obtenerUltimoEstado() 
	{
		$q = Doctrine_Query::create()
		    ->select('e.idestadoalumno as idestadoalumno')
    		->from('EstadosAlumnoHistorial e')
        	->where('e.idalumno = ?', $this->getIdalumno())
        	->orderBy('e.fecha DESC, e.id DESC');

		return $q->fetchOne();
    }

	// Obtiene la ultimo expediente
	public function obtenerExpediente() 
	{
		$q = Doctrine_Query::create()
		    ->select('e.*')
    		->from('ExpedientesEgresados e')
    		->innerjoin('e.Titulos t on e.idtitulo=t.idtitulo')
        	->where('e.idalumno = ?', $this->getIdalumno())
        	->andWhere('t.niveltitulo=1')
        	->orderBy('e.fechasolicitud DESC');

		return $q->fetchOne();
    }    

	// Obtiene la ultimo expediente
	public function obtenerExpedienteSegunTitulo($idtitulo) 
	{
		$q = Doctrine_Query::create()
		    ->select('e.*')
    		->from('ExpedientesEgresados e')
    		->innerjoin('e.Titulos t on e.idtitulo=t.idtitulo')
        	->where('e.idalumno = ?', $this->getIdalumno())
        	->andWhere('e.idtitulo= ?', $idtitulo)
        	->orderBy('e.fechasolicitud DESC');

		return $q->fetchOne();
    }    

	// Obtiene la fecha de egreso
	public function obtenerFechaEgreso() 
	{
		$q = Doctrine_Query::create()
		    ->select('e.fecha as fecha')
    		->from('EstadosAlumnoHistorial e')
        	->where('e.idalumno = ?', $this->getIdalumno())
        	->andWhere('e.idestadoalumno = 3')
        	->orderBy('e.fecha DESC')
        	->fetchOne();

		return $q['fecha'];
    }    
	// Obtiene la ultima inscripcion a ciclo lectivo
	public function obtenerUltimaInscripcionCiclo() 
	{
		$q = Doctrine_Query::create()
		    ->select('i.*')
    		->from('InscripcionesCicloLectivo i')
    		->innerjoin('i.CiclosLectivos c on i.idciclolectivo=c.id')
        	->where('i.idalumno = ?', $this->getIdalumno())
        	->andWhere('c.activo = 1')
        	->orderBy('i.fecha DESC,i.id DESC');

		return $q->fetchOne();
    }
    
	// Obtiene comision del alumno en la materia
	public function obtenerComision($idmateriaplan) 
	{
		// Definicion de variables   
		$idalumno = $this->getIdalumno();			

		$q = Doctrine_Query::create()
		    ->select('am.*')
			->from('AluMat am')
			->innerjoin('am.Comisiones a on am.idcomision=a.idcomision')
			->innerjoin('am.Catedras c on am.idcatedra=c.idcatedra')
			->where('am.idalumno = ?', $idalumno)
			->andWhere('c.idmateriaplan = ?', $idmateriaplan)   
			->andWhere('c.idsede = ?', $this->getIdsede())
            ->fetchOne();

         return $q;
    }
      
    // Get alumno by idpersona, idplanestudio
	  public function obtenerAlumnoPersonaPlan($idpersona, $idplanestudio) 
	  {
		
		$idalumno ="";

		// Obtener materias a visualizar en pantalla
		$alumno = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT a.idalumno FROM alumnos a WHERE idplanestudio=".$idplanestudio." 
				AND a.idpersona = ".$idpersona." "); 
		
		foreach($alumno as $fila){
			$idalumno = $fila['idalumno'];
		}
		return $idalumno;
	}  
   
	// Obtiene materias habilitadas para cursar/rendir para un alumno y plan de estudios dados
	public function obtenerMateriasHabilitadas($situacion, $tipomesa='') 
	{
		// Definicion de variables   
		$resultado = array();
		$resultado = Doctrine_Core::getTable('Correlatividades')->getMateriasDisponiblesCursarRendir($this->getIdalumno(), $this->getIdplanestudio(), $situacion, $tipomesa, $this->getIdsede());		  				

		return $resultado;
	}

	// Obtiene materias habilitadas para cursar/rendir para un alumno y plan de estudios dados
	
	public function obtenerMateriasHabilitadasAutogestion($situacion, $tipomesa='', $cursoDesde, $cursoHasta, $arregloMaterias) 
	{
		/*
		$cursoLimite : parametro definido por administracion que determina hasta que aÃ±o tiene permitido cursar
		$arregloMaterias: parametro definido por administracion que determina que materias puede cursar
		*/

		// Definicion de variables   
		$resultado = array();
		$cursoDesde=0;
		$cursoHasta=5;
		// si el alumno esta ingresando al preuniversitario
		//$idalumno, $idplanestudio, $situacion, $tipomesa='', $idsede=1, $cursoDesde, $cursoHasta, $arregloMaterias
		$resultado = Doctrine_Core::getTable('Correlatividades')->getMateriasDisponiblesCursarRendirAutogestion($this->getIdalumno(), $this->getIdplanestudio(), $situacion, $tipomesa, $this->getIdsede(), $cursoDesde, $cursoHasta, $arregloMaterias);		  				

		return $resultado;
	}


	// Obtiene materias habilitadas para cursar/rendir para un alumno y plan de estudios dados
	public function obtenerMateriasHabilitadasPreuniversitario() 
	{		
         $q = Doctrine_Query::create()
            ->select('m.*')
            ->from('MateriasPlanes m')
            ->where('m.anodecursada = 0 and m.idtipomateria = 3 and m.idplanestudio = 168')
            ->andWhere('m.idmateriaplan NOT IN (
					SELECT mp.idmateriaplan 
					FROM AluMat am
					INNER JOIN am.Alumnos al ON am.idalumno = al.idalumno
					INNER JOIN am.Comisiones co ON am.idcomision = co.idcomision 
					INNER JOIN co.Catedras ca ON co.idcatedra = ca.idcatedra
					INNER JOIN ca.MateriasPlanes mp ON ca.idmateriaplan = mp.idmateriaplan
					INNER JOIN mp.PlanesEstudios pe ON mp.idplanestudio = pe.idplanestudio
					WHERE al.idplanestudio=168 and al.idpersona='.$this->getIdpersona().' and am.idestadomateria <>11				
			)');  
            
		return $q->execute();
	}
        	
	// Obtiene mesas de examenes habilitadas para rendir para un alumno y plan de estudios dados
	public function obtenerMesasExamenesHabilitadas($idmateriaplanes) 
	{
		// Definicion de variables  
		$resultado = array();
	
		// los id materias vienen encriptados
		$detalleplanes = unserialize(base64_decode($idmateriaplanes));
		
		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT DISTINCT IF(e.idalumno = ".$this->getIdalumno().", 1, 0) AS inscripto,fe.fecha, fe.hora, fe.libro, fe.folio, fe.idmesaexamen ,m.nombre, cf.condicion, fe.idmateriaplan 
				FROM mesas_examenes fe 
				LEFT JOIN examenes e 
					ON fe.idmesaexamen = e.idmesaexamen 
				INNER JOIN detalle_plan dp 
					ON fe.idmateriaplan = MP.idmateriaplan 
				INNER JOIN materias m 
					ON MP.idmateria = m.idmateria 
				INNER JOIN condiciones_mesas cf 
					ON fe.idcondicion = cf.idcondicion 
				WHERE
					fe.idestadomesaexamen = 1 
					AND MP.idplanestudio = ".$this->getIdplanestudio()." 
					AND fe.idcondicion IN (1,2,4) 
					AND fe.fecha >= now() 
					AND fe.idmateriaplan IN ( ".$detalleplanes." ) 
				ORDER BY fe.fecha DESC, m.nombre 
				LIMIT 0, 400
		");
	  
		return base64_encode(serialize($resultado));
	} 
	  	
	// Inscribir alumno a mesa de examen 
	public function inscribirMesaExamen($idmesaexamen) 
	{           		
		/* Se busca la cantidad de veces que rindio el alumno y en caso de que la materia 
		indique que posee limite de cantidades (cantidadaplazos) no debe dejarlo rendir*/
/*		$oMesaExamen = Doctrine_Core::getTable('MesasExamenes')->find($idmesaexamen);
		$cantidadaplazos=$oMesaExamen->getComisiones()->getCatedras()->getMateriasPlanes()->getCantidadaplazos();	
		echo $cantidadaplazos;
		die;*/

		// Buscar si el alumno ya se encuentra inscripto a dicha mesa
		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT * 
				FROM mesas_examenes m
				INNER JOIN examenes e
					ON m.idmesaexamen = e.idmesaexamen 
				WHERE
					m.idmesaexamen =".$idmesaexamen."  
					AND e.idalumno = ".$this->getIdalumno()."
		");
		if(count($resultado)>0) {
			$existe = true;
		} else {
			$existe = false;
		}
		
		$oMesaExamen = Doctrine_Core::getTable('MesasExamenes')->find($idmesaexamen);		
		// Buscar la ultima examen de esa catedra
		$ultima = Doctrine_Query::create()
		    ->select('*, m.fecha as fecha')
			->from('Examenes e')
			->innerjoin('e.MesasExamenes m on e.idmesaexamen=m.idmesaexamen')
			->where('m.idcatedra = ?', $oMesaExamen->getIdcatedra())
			->andWhere('e.idalumno = ?', $this->getIdalumno())			
			->orderBy('m.fecha DESC')   
            ->fetchOne();
		        
		// Controla si la ultima vez que rendio para esa catedra no fue ausente    		       			
		$noAusente = 1;
		/*
		if ($ultima['promedio'] =='U') {
			$fecha_inicio = $ultima['fecha'];
			$fecha_fin = $oMesaExamen->getFecha();

			// Buscar todas las mesas posteriores a la ultima mesa de examen
			$mesasPosteriores = Doctrine_Query::create()
			    ->select('*')
				->from('MesasExamenes m')
				->where('m.idcatedra = ?', $oMesaExamen->getIdcatedra())
				->andWhere('m.fecha BETWEEN ? AND ?', array($fecha_inicio, $fecha_fin))
				->andWhere('m.idestadomesaexamen != ?', MESASANULADAS)
				->andWhere('m.idestadomesaexamen != ?', MESASELIMINADAS)
				->orderBy('m.fecha DESC')   
	            ->execute();
	
			if(count($mesasPosteriores) > 2) {
            	$noAusente = 1;
            } else {
            	$noAusente = 0;
            }		
		}*/
		
		//Controla que no este inscripto a esa catedra en el mismo turno
		$noInscripto = 0; 
	    if ($ultima['idmesaexamen']) {
	    	if ($ultima['promedio']!="UC") {
		    	$oUltimoMesaExamen = Doctrine_Core::getTable('MesasExamenes')->find($ultima['idmesaexamen']);
				// Controla que tenga idllamdo sino tiene es porque es del sistema anterior
				if ($oUltimoMesaExamen->getIdllamado()!="") {
					$oUltimoTurno = Doctrine_Core::getTable('LlamadosTurno')->find($oUltimoMesaExamen->getIdllamado());
					$oInscripcionTurno = Doctrine_Core::getTable('LlamadosTurno')->find($oMesaExamen->getIdllamado());
					if (isset($oUltimoTurno)) $utlimoTurno = $oUltimoTurno->getIdfecha();
					$inscripcionTurno = $oInscripcionTurno->getIdfecha();
					if (($oMesaExamen->getIdmesaexamen()!=$oUltimoMesaExamen->getIdmesaexamen()) and ($utlimoTurno!=$inscripcionTurno)) {
						$noInscripto = 1;
					}
				} else {
					$noInscripto = 1;			
				}
	    	} else {
	    		$noInscripto = 1;
	    	}
        } else {
			$noInscripto = 1;        
        }
        
		// Buscar si tiene cupo para poder inscribirse a dicha mesa
		$cupo = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT * 
				FROM examenes e
				WHERE
					e.idmesaexamen =".$idmesaexamen."  
		");		
		// esto estava activo ver con marcelo por que no dejaba inscribir a mas de 25 alumnos
		if (count($cupo) >= 25) {
			$existeCupo = 0;		
		} else {
			$existeCupo = 1;
		}
		
		$puedeInscribir = 1;
		if($existe) {
    		$puedeInscribir = 0;
		}
		
		// Controla que la mesa de examen no sea anterior al Ciclo lectivo del alumno
		$arr = explode('-', $oMesaExamen->getFecha());
		$anioMesa = (int)$arr[0];		
		$anioCiclo = (int)$this->getCiclosLectivos()->getCiclo();

		$cicloAnterior = 1; 
		if ($anioMesa < $anioCiclo) {
			$cicloAnterior = 0;
		}
		// Agregar mesa de examen
		if ($puedeInscribir and $existeCupo and $noAusente and $noInscripto and $cicloAnterior) {
			// Crea un objecto Examenes
			$oExamen = new Examenes();
			// Asigna los valores correspondientes
			$oExamen->setIdalumno($this->getIdalumno());
			$oExamen->setIdmesaexamen($idmesaexamen);
			$oExamen->save();
		}
		if ($puedeInscribir and $existeCupo and $noAusente and $noInscripto and $cicloAnterior) {
			return 0;
		} else {
			if (!$puedeInscribir) {
   				return 1;
			}
			if (!$existeCupo) {
   				return 2;
			}
			if (!$noAusente) {
				return 3;
			}
			if (!$noInscripto) {
				return 4;
			}			
			if (!$cicloAnterior) {
				return 5;
			}			
		}
	}	


	// Inscribir alumno a mesa de examen 
	public function inscribirMesaExamenAutogestion($idmesaexamen) 
	{           		

		// busco la catedra de la mesa seleccionada
		$Mesa = Doctrine_Query::create()
		    ->select('m.idcatedra, m.idllamado')
			->from('MesasExamenes m')
			->where('m.idmesaexamen = ?', $idmesaexamen)
            ->fetchOne();

		$idcatedra= $Mesa['idcatedra'];
		$idllamado= $Mesa['idllamado'];

		// se busca si ya no esta inscripto 
		//if($idcatedra>0) {
			$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT * 
					FROM inscripciones_mesas im
					WHERE
						im.idcatedra =".$idcatedra."  
						AND im.idalumno = ".$this->getIdalumno()."
			");
			if(count($resultado)>0) {
				$existe = true;
			} else {
				$existe = false;
			}

			// Agregar Alumno a la mesa de examen
			if (!$existe) {
				// Crea un objecto Examenes
				$oInscripcionesMesas = new InscripcionesMesas();
				// Asigna los valores correspondientes
				$oInscripcionesMesas->setIdalumno($this->getIdalumno());
				$oInscripcionesMesas->setIdcatedra($idcatedra);
				$oInscripcionesMesas->setIdllamado($idllamado);
				$oInscripcionesMesas->setIdcondicionmesa(4);
				$oInscripcionesMesas->save();
			} else {
				return 1;
			};
	}

    // Inscribir alumno a materia
	function inscribirMateria($idcomision) 
	{
		// Obtiene la comision
		$oComision = Doctrine_Core::getTable('Comisiones')->find($idcomision);
		$comisiones = $oComision->getCatedras()->obtenerComisiones();
		
		$puedeInscribir = true;	
		foreach ($comisiones as $comision){
			// Buscar si el alumno ya se encuentra regular a dicha comision
			$existe = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT * 
					FROM alu_mat am 								 				
					WHERE
						am.idcomision = ".$comision->getIdcomision()." 
						AND am.idalumno = ".$this->getIdalumno()."
						AND am.idestadomateria = 1 
						AND am.fechavencimiento > concat(year(now()), '-1-1')
			");		
			foreach ($existe as $fila) {
    			$puedeInscribir = false;
			}				
		}
		
	    // Agregar inscripcion
	    if ($puedeInscribir) {
			// Crea un objecto AluMat
			$oAluMat = new AluMat();
			// Asigna los valores correspondientes
			$oAluMat->setIdalumno($this->getIdalumno());
			$oAluMat->setIdcatedra($oComision->getIdcatedra());
			//Incorporacion de idmateria GZ
			$oAluMat->setIdmateria($oComision->getCatedras()->getMateriasPlanes()->getIdmateria());
			$oAluMat->setIdcomision($idcomision);
			$oAluMat->setIdestadomateria(1);
			$oAluMat->setFecha(date('Y-m-d'));
			$oAluMat->setFechavencimiento(date('Y-m-d'));
			$oAluMat->save();
			
			return 1;
		} else {
			return 2;
		}
	}

	// Obtiene el analitico del alumno
  	public function obtenerAnalitico($sinaplazos='1') 
  	{

       $sql="SELECT 
			mp.idmateriaplan AS codigo, 
			mp.idmateriaplan AS idmp, 
			m.idmateria AS idm, 
			m.nombre, 
			e.promedio as nota, 
			me.libro, 
			li.descripcion as libroacta,
			me.folio, 
			DATE_FORMAT(me.fecha,'%d/%m/%Y') as fecha, 
			cm.condicion, 
			cm.idcondicion,
			mp.anodecursada, 
			mp.saleanalitico, 
			mp.orden, 
			REPLACE(e.promedio, ',', '.') as calificacion, 
			me.fecha, 
			me.idtipoexamen, 
			e.promedio as calif,
			mp.idtipomateria,
			e.idmesaexamen as idme, 
            te.descripcion tipoexamen,
            tm.descripcion tipomateria,
            mp.saleanalitico enanalitico
			FROM examenes e 
			INNER JOIN mesas_examenes me ON e.idmesaexamen = me.idmesaexamen 
			LEFT JOIN libros_actas li ON me.idlibroacta = li.idlibroacta
			INNER JOIN catedras c ON me.idcatedra = c.idcatedra
			INNER JOIN materias_planes mp ON c.idmateriaplan = mp.idmateriaplan 
			INNER JOIN materias m ON mp.idmateria = m.idmateria 
			INNER JOIN condiciones_mesas cm ON me.idcondicion = cm.idcondicion 
			INNER JOIN alumnos a ON e.idalumno = a.idalumno 
			INNER JOIN tipos_examenes te ON te.idtipoexamen = me.idtipoexamen 
			INNER JOIN tipos_materias tm ON tm.idtipomateria = mp.idtipomateria 
			WHERE 
			a.idalumno = ".$this->getIdalumno()."  AND me.idestadomesaexamen = 4 
			AND ((me.idtipoexamen = 1 ";
		//AND (e.promedio NOT LIKE 'U%') ver con marcelo dado que analitico se imprime con los checkbox
            if($sinaplazos){
            	$sql.="	AND e.promedio >=4) OR (e.promedio LIKE 'A%') OR (me.idtipoexamen = 4)) 
			ORDER BY mp.anodecursada, mp.orden, mp.idmateriaplan; ";  
            } else{
            	$sql.="	) OR (me.idtipoexamen = 4)) 
			ORDER BY mp.anodecursada, mp.orden, mp.idmateriaplan; ";  
            }

	
		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);
		return $resultado;
  	}  

	// Obtiene el analitico del alumno
  	public function obtenerDatosAnalitico() 
  	{
        
       $sql="SELECT 
			p.idpersona AS idpersona,
       		p.apellido AS apellido, 
			p.nombre AS nombre, 
			p.numerodoc AS numerodoc,
			p.nrodoc AS nrodoc,
			p.fechanac as fechanac,
			td.descripcion AS tipodocumento,
			p.idsexo AS idsexo,
			c.descripcion AS ciudadnac,
			pr.descripcion AS provincianac,
			pai.descripcion AS paisnac,
			cs.descripcion AS ciudadencabezado,  
            fa.nombre as nomfac,          
            cr.nombre as nomcar,
            tit.nombre as nombretitulom,
            tit.nombrefemenino as nombretitulof,
			cius.descripcion as ciudadsede,   
			e.descripcion as estudiodescripcion ,  
			e.establecimiento as estudioestablecimiento, 
			e.anioegreso as estudioanioegreso, 
			ciuest.descripcion as estudiociudad,
			proest.descripcion as estudioprovincia,
       		paisest.descripcion as estudiopais,
			e.idcategoriatitulo as estudiocategoria,
			pros.descripcion as provinciasede            
			FROM personas p 
			INNER JOIN alumnos a ON p.idpersona = a.idpersona 
			INNER JOIN titulos_planes tp on a.idplanestudio = tp.idplanestudio
			INNER JOIN titulos tit on tp.idtitulo = tit.idtitulo
			INNER JOIN tipos_documentos td ON td.idtipodoc = p.idtipodoc  
			INNER JOIN ciudades c ON p.idciudadnac = c.idciudad 
			INNER JOIN sedes s ON s.idsede = a.idsede  
			INNER JOIN ciudades cius ON cius.idciudad = s.idciudad   
			INNER JOIN provincias pros ON pros.idprovincia = cius.idprovincia  
			INNER JOIN planes_estudios pe ON pe.idplanestudio = a.idplanestudio  
			INNER JOIN carreras car ON car.idcarrera = pe.idcarrera 
			INNER JOIN facultades f ON f.idfacultad = car.idfacultad  
			INNER JOIN ciudades cs ON s.idciudad = cs.idciudad 
			INNER JOIN provincias pr ON pr.idprovincia = c.idprovincia
			INNER JOIN paises pai ON pai.idpais = pr.idpais  
			INNER JOIN carreras cr ON cr.idcarrera = pe.idcarrera 
			INNER JOIN facultades fa ON fa.idfacultad = cr.idfacultad  
			LEFT JOIN estudios e ON e.idpersona = p.idpersona 
			LEFT JOIN ciudades ciuest ON e.idciudad = ciuest.idciudad
			LEFT JOIN provincias proest ON ciuest.idprovincia = proest.idprovincia
       		LEFT JOIN paises paisest ON proest.idpais = paisest.idpais
			WHERE 
			a.idalumno = ".$this->getIdalumno()."
			GROUP BY p.idpersona";
	
		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);
		return $resultado;
  	}  
  	
    // Obtiene las materias que esta inscripto el alumno
	public function obtenerMateriasInscripto() 
	{
		$resultado = Doctrine_Core::getTable('AluMat')->getMateriasCursando($this->getIdalumno());
			
		return $resultado;
	}  	
	
    // Obtiene las materias que esta inscripto el alumno
	public function obtenerMateriasInscriptoPreuniversitario() 
	{
		$resultadoPreuniversitario = array();
		$resultadoCarrera = array();

		$oAlumno = Doctrine_Query::create()
		    ->select('a.*')
    		->from('Alumnos a')
        	->where('a.idpersona = ?', $this->getIdpersona())
        	->andWhere('a.idplanestudio = 168')
        	->fetchOne();	

		$resultadoPreuniversitario = Doctrine_Core::getTable('AluMat')->getMateriasCursando($oAlumno->getIdalumno());	
		$resultadoCarrera = Doctrine_Core::getTable('AluMat')->getMateriasCursando($this->getIdalumno());
		//$resultado = array_merge((array)$resultadoPreuniversitario, (array)$resultadoCarrera);	
		$resultado = $resultadoPreuniversitario +$resultadoCarrera;
				
		return $resultado;
	}  		
	
	// Obtiene las materias que esta inscripto el alumno
	public function obtenerMesasInscripto() 
	{
    	$resultado = Doctrine_Core::getTable('Examenes')->getMesasInscripto($this->getIdalumno());
		
    	return $resultado;
    }	
    	
	// Obtiene las materias que esta inscripto el alumno
	public function obtenerMesasInscriptoAutogestion() 
	{
    	$resultado = Doctrine_Core::getTable('InscripcionesMesas')->getMesasInscripto($this->getIdalumno());
		
    	return $resultado;
    }	


	// obtener el nombre del plan al cual esta asociado
	public function getPlanEstudio() 
	{
    	return $this->getPlanesEstudios()->getNombre();
    }
	
    // obtener el nombre de la carrera a la cual esta asociada
	public function getNombreCarrera() 
	{
    	return $this->getPlanesEstudios()->getCarreras()->getNombre();
    }

	// obtener el nombre de la facultad a la cual esta asociada
	public function getNombreFacultad() 
	{
    	return $this->getPlanesEstudios()->getCarreras()->getFacultades()->getNombre();
    }

	// obtener el id de la facultad a la cual esta asociada
	public function getIdFacultad() 
	{
    	return $this->getPlanesEstudios()->getCarreras()->getIdfacultad();
    }
        
	// obtener el decano de la facultad, esta estructura puede cambiar
	public function getNombreDecano() 
	{
		// ver en designaciones como confeccionar esto
    	return $this->getPlanesEstudios()->getCarreras()->getFacultades()->getDecano();
    }
    
    public function obtenerDatosUsuario($idUsuario)
    {
    	$q = Doctrine_Query::create()
	  		->select("*")
	 		->from("sfGuardUser u")
	 		->where("u.id = ".$idUsuario);
	       
        return $q->execute();
    }     
    
  public function obtenerPlanesPersonas($idpersona)
    {
    	$q = Doctrine_Query::create()
	  		->select('a.idplanestudio AS idplanestudio')
	 		->from('alumnos a')
	 		->where('a.idpersona = '.$idpersona)
	    	->execute();
      
        return $q;
    }   


  public function completarMateriasConvenioIes()
    {
	//Obtener materias de primero y segundo aÃ±o
	//Para cada materia agergar registro em Mesas Examenes y Examenes aprobando al alumno exeptuando 2

    	/*$q = Doctrine_Query::create()
	  		->select('a.idplanestudio AS idplanestudio')
	 		->from('alumnos a')
	 		->where('a.idpersona = '.$idpersona)
	    	->execute();
      
        return $q;*/
    }
}