<?php

/**
 * Personas
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sig
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Personas extends BasePersonas
{
	public function __toString() {
		if ($this->getApellido()=="") {
			$nombre = "";
		} else {
			$nombre = strtoupper($this->getApellido()).", ".$this->getNombre();
		}
		return $nombre;
    }	

    // Calcula la edad de una persona
    public function getEdad() {
    	//fecha de nacimiento
    	$fecha_nac = $this->getFechanac();
		$dia=date("j"); 
		$mes=date("n"); 
		$anno=date("Y"); 
		
		//descomponer fecha de nacimiento 
		$dia_nac=substr($fecha_nac, 8, 2); 
		$mes_nac=substr($fecha_nac, 5, 2); 
		$anno_nac=substr($fecha_nac, 0, 4); 
		
		if($mes_nac>$mes){ 
			$calc_edad= $anno-$anno_nac-1; 
		}else{ 
			if($mes==$mes_nac AND $dia_nac>$dia){ 
				$calc_edad= $anno-$anno_nac-1; 
			}else{ 
				$calc_edad= $anno-$anno_nac; 
			} 
		} 
		if ($calc_edad <= 0) {
			return "-";
		} else {
			return $calc_edad;
		}
    }
        
    // Obtiene los estudios previos
 	public function getEstudiosPrevios() {
		$q = Doctrine_Query::create()
  			->select('e.*')
    		->from('Estudios e')
    		->where('e.idpersona = ?', $this->getIdPersona())
    		->execute();

		return $q;
  	}  

  	// Obtiene los estudios previos
 	public function getEstudiosPreviosSegunFormacion($formacion_docente=0) {

		if ($formacion_docente==0){

			$q = Doctrine_Query::create()
  			->select('e.*')
    		->from('Estudios e')
    		->where('e.idpersona = ?', $this->getIdPersona())
    		->andWhere("e.formaciondocente = false ")
    		->execute();

		} else {

            $q = Doctrine_Query::create()
  			->select('e.*')
    		->from('Estudios e')
    		->where('e.idpersona = ?', $this->getIdPersona())
    		->andWhere("e.formaciondocente = true ")
    		->execute(); 

		}

		return $q;
  	}    
  	
    // Obtiene los estudios previos
 	public function getEstudioPrevio($orden=1) {
 	  	if ($orden==1) {
  		$orderBy = 'e.fecha DESC';
  	} else {
  		$orderBy = 'e.idnivelestudio DESC';
  	}
 		
		$q = Doctrine_Query::create()
  			->select('e.*')
    		->from('Estudios e')
    		->where('e.idpersona = ?', $this->getIdPersona())
    		->orderBy($orderBy)
    		->fetchOne();

		return $q;
  	}   	
    
    // Obtiene las documentaciones laborales
 	public function getDocumentacionesLaborales() {
		$q = Doctrine_Query::create()
  			->select('d.*')
    		->from('DocLaboral d')
    		->where('d.idpersona = ?', $this->getIdPersona())
    		->execute();

		return $q;
  	}    
    
  	// Obtiene el contacto
 	public function getContacto() {
		$q = Doctrine_Query::create()
  			->select('c.*')
    		->from('Contactos c')
    		->where('c.idpersona = ?', $this->getIdPersona())
    		->fetchOne();

		return $q;
  	} 

  	// verifica si se ha generado el usuario para uso del sistema
 	public function existeUsuario() {
		$q = Doctrine_Query::create()
  			->select('p.*')
    		->from('profile p')
    		->where('p.nrodoc = ?', $this->getNrodoc())
    		->fetchOne();

		return $q;
  	} 

  	// verifica si el alumno esta en el preuniversitario
 	public function existeEnPreuniversitario() {
		$q = Doctrine_Query::create()
  			->select('a.*')
    		->from('alumnos a')
    		->where('a.idpersona = ?', $this->getIdpersona())
    		->andWhere('a.idplanestudio = 168')
    		->fetchOne();

		return $q;
  	} 

  	// Obtiene los planes de estudio de la persona
  	public function obtenerPlanesEstudios() {
		// Obtener materias a visualizar en pantalla
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT C.*, PL.nombre AS plan, A.idalumno as idalumno 
				FROM planes_estudios PL
				INNER JOIN carreras C 
					ON PL.idcarrera = C.idcarrera 
				INNER JOIN alumnos A
					ON PL.idplanestudio = A.idplanestudio 
				INNER JOIN personas P
					ON A.idpersona = P.idpersona 
				WHERE P.idpersona = ".$this->getIdpersona()
		);
		
		return $q;  	
  	}

 

  	// Obtiene los planes de estudio de la persona
  	public function obtenerPlanesEstudiosActivos() {
		// Obtener materias a visualizar en pantalla
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT C.*, PL.nombre AS plan, A.idalumno as idalumno 
				FROM planes_estudios PL
				INNER JOIN carreras C 
					ON PL.idcarrera = C.idcarrera 
				INNER JOIN alumnos A
					ON PL.idplanestudio = A.idplanestudio 
				INNER JOIN personas P
					ON A.idpersona = P.idpersona 
				WHERE PL.idestadoplan=2 and P.idpersona = ".$this->getIdpersona()
		);
		
		return $q;  	
  	}

  	// Obtiene los planes de estudio de la persona
  	public function obtenerPlanesEstudiosActivosPreuniversitario() {
		// Obtener materias a visualizar en pantalla
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT C.*, PL.nombre AS plan, A.idalumno as idalumno 
				FROM planes_estudios PL
				INNER JOIN carreras C 
					ON PL.idcarrera = C.idcarrera 
				INNER JOIN alumnos A
					ON PL.idplanestudio = A.idplanestudio 
				INNER JOIN personas P
					ON A.idpersona = P.idpersona 
				WHERE PL.idplanestudio<>168 and PL.idestadoplan=2 and P.idpersona = ".$this->getIdpersona()
		);
		
		return $q;  	
  	}

  	
	// Busca el perfil de la persona
	public function obtenerPerfil() {
    	$q = Doctrine_Query::create()
	  		->select("*")
	 		->from("Profile p")
	 		->where("p.nrodoc = ".$this->getNrodoc())
	 		->andWhere("p.tipodoc = ".$this->getIdtipodoc())
	    	->fetchOne();
	       
        return $q;
	}  

	// Busca los alumnos de la persona
	public function buscarAlumnos() {
    	$q = Doctrine_Query::create()
	  		->select("*")
	 		->from("Alumnos a")
	 		->where("a.idpersona = ".$this->getIdpersona())
	    	->execute();
	       
        return $q;
	}  
	
	// Obtiene las noticias vigente para una persona
	public function obtenerNoticias() {
		$fecha = date('Y-m-d');
		// Obtener materias a visualizar en pantalla
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT DISTINCT N.* 
				FROM noticias N	
				INNER JOIN noticias_carrera NC 
					ON N.id = NC.idnoticia				
				INNER JOIN planes_estudios P 
					ON NC.idcarrera = P.idcarrera				
				INNER JOIN alumnos A 
					ON P.idplanestudio = A.idplanestudio					
				WHERE (A.idpersona = ".$this->getIdpersona().") AND ('". $fecha."' BETWEEN N.inicio AND N.fin) AND (N.is_active = 1)
				ORDER BY N.orden ASC"
		);

		return $q;  
	}  

	// Obtiene las noticias vigente para una persona
	public function obtenerNoticiasPublicas() {
		$fecha = date('Y-m-d');
		// Obtener materias a visualizar en pantalla
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT DISTINCT N.* 
				FROM noticias N	
				INNER JOIN noticias_carrera NC 
					ON N.id = NC.idnoticia				
				INNER JOIN planes_estudios P 
					ON NC.idcarrera = P.idcarrera				
				INNER JOIN alumnos A 
					ON P.idplanestudio = A.idplanestudio					
				WHERE (A.idpersona = ".$this->getIdpersona().") AND ('". $fecha."' BETWEEN N.inicio AND N.fin) AND (N.is_active = 1) AND (N.privada = 0)
				ORDER BY N.orden ASC, N.id DESC"
		);
		
		return $q;  
	}  
    
    // Obtiene las facultades a las que pertenece una persona
	public function obtenerFacultades() {  
  		$q = Doctrine_Query::create()
			->select('f.idfacultad as idfacultad, f.nombre as facultad, a.idalumno as idalumno')
	 		->from("Alumnos a")
	 		->innerjoin("a.Personas p on a.idpersona = p.idpersona")
	 		->innerjoin("a.PlanesEstudios pl on a.idplanestudio = pl.idplanestudio")
	 		->innerjoin("pl.Carreras c on pl.idcarrera = c.idcarrera")
	 		->innerjoin("c.Facultades f on c.idfacultad = f.idfacultad")
	 		->where("p.idpersona = ".$this->getIdpersona())
	 		->andWhere("c.idtipocarrera <> 5 ")
	 		->groupBy('f.idfacultad');
	 
		return $q->execute();
		
	}
    
    //********************************************************
	// Funciones para obtener informacion para analitico final
	//********************************************************
	public function descEgresado() {  
  		return ($this->getIdsexo()==1)?"egresado":"egresada";
	}
    public function descNacido() {  
  		return ($this->getIdsexo()==1)?"nacido":"nacida";
	} 
	public function descProvincia() {  
  		    $provincia="";
  		    switch ($this->getIdnacionalidad()) {
			    case "1":
			        $provincia="Provincia";
			        break;
			    case "2":
			        $provincia="Departamento";
			        break;
			    case "3":
			        $provincia="Otro";
			        break;
			}
	        return $provincia;
	} 


    public function getCarrerasinscripto(){
	
		$q = Doctrine_Query::create()		
				->select('a.idalumno, c.nombre as nombrecarrera , pe.nombre as nombreplan')		
		 		->from("Alumnos a")		
				->innerjoin("a.PlanesEstudios pe on a.idplanestudio = pe.idplanestudio")		
				->innerjoin("pe.Carreras c on c.idcarrera = pe.idcarrera")		
		 		->where("a.idpersona = ".$this->getIdpersona())
				->andWhere("pe.idplanestudio <> 168");
	 	return $q->execute();
    }


    public function getPlanesinscripto($idpersona){
		
		$q = Doctrine_Query::create()
				->select('a.idalumno, c.nombre , pe.nombre')
		 		->from("Alumnos a")
				->innerjoin("a.PlanesEstudios pe on a.idplanestudio = pe.idplanestudio")
				->innerjoin("pe.Carreras c on c.idcarrera = pe.idcarrera")
		 		->where("a.idpersona = ".$idpersona);
	 
		$alu= $q->execute();
		
		$variable='';
		$arrP=array();
		
		foreach($alu as $al){
			if($al->getIdplanestudio()<>168 ){
				array_push($arrP,$al->getIdplanestudio());
			}
		}
		if($arrP) return $arrP;
    }
}