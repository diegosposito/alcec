<?php

/**
 * Alumnos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sig
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Estadisticas extends sfDoctrineRecord
{	
   public function obtenerPromediosPorCarrera($desde, $hasta, $idcarrera, $ausentes, $desaprobados) {
   	  /////////////////////////////////////////////////////
		//conexion webservice alumnos
		$soapclient = new nusoap_client(sfConfig::get('app_wsestadisticas_alumnos'));
		$soapclient->setCredentials("root", "sistemas2009");
		
		// llamamos la funciÃ³n implementada en el webservices
		$resultadoSoap = $soapclient->call('obtenerPromediosDeCarrerasPorPeriodo',
			array('desde' => $desde, 'hasta' => $hasta, 'idplanestudio' => $idcarrera, 'ausentes' => $ausentes, 'desaprobados' => $desaprobados)		
		);
						       
		$alumnos_actividad_sc = unserialize(base64_decode($resultadoSoap));  

		return $alumnos_actividad_sc;
   }
   	
	public function obtenerAspirantesPeriodo($desde1, $hasta1, $desde2, $hasta2, $idsede, $idtipocarrera) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT
				  fa.idfacultad,
		          fa.nombre as facultad, 
		          se.nombre as sede,
				  c.nombre as carrera, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."') then 1 else null end) as totalprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=1) then 1 else null end) as varonesprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=2) then 1 else null end) as mujeresprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."') then 1 else null end) as totalsegundoperiodo,
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=1) then 1 else null end) as varonessegundoperiodo,
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=2) then 1 else null end) as mujeressegundoperiodo
				FROM personas pe
						JOIN alumnos al ON pe.idpersona = al.idpersona
						JOIN estados_alumno_historial eah ON al.idalumno = eah.idalumno
						JOIN
						(
						SELECT MAX(id) as id, idalumno FROM estados_alumno_historial
						GROUP BY idalumno
						) as info ON eah.id = info.id AND eah.idalumno = info.idalumno
						JOIN carreras c ON al.idplanestudio = c.idcarrera
						JOIN facultades fa ON c.idfacultad = fa.idfacultad 
		                JOIN sedes se ON al.idsede = se.idsede
						WHERE eah.idestadoalumno IN (1,2) and al.idplanestudio <> 168 ";

		if ($idtipocarrera<>'' AND $idtipocarrera<>'0')
	        $sql .= "AND c.idtipocarrera IN (".$idtipocarrera.") ";			

		$sql .=	"GROUP BY al.idsede, al.idplanestudio HAVING totalprimerperiodo>0 OR totalsegundoperiodo > 0
		ORDER BY se.idsede, fa.idfacultad, c.idcarrera; ";				

		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);
		
        return $resultado;		     
	}

	public function obtenerIngresosMensualesxAnio($anio) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT COUNT(DISTINCT id) AS cantidad, SUM(monto) as monto, mes, anio, mesanio FROM recibos_generados WHERE estado = 3 GROUP BY mes, anio HAVING anio = '".$anio."' ";

	  	$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);

        return $resultado;		     
	}

	public function obtenerIngresosDetallexAnioMes($anio, $mes) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT per.apellido, per.nombre, CONCAT(per.apellido, ', ', per.nombre) as apellidonombre, rg.mesanio, rg.anio, rg.monto, CONCAT(per2.apellido, ', ', per2.nombre) as cobrador FROM recibos_generados rg JOIN personas per ON rg.idpersona = per.idpersona LEFT JOIN personas per2 ON rg.idcobrador = per.idpersona
		WHERE rg.mes = ".$mes." AND rg.anio = ".$anio." ORDER BY per.apellido, per.nombre; ";

	  	$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);

        return $resultado;		     
	}

	public function obtenerAspirantesPeriodoGroupFacultad($desde1, $hasta1, $desde2, $hasta2, $idsede, $idtipocarrera) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT
				  fa.idfacultad,
		          fa.nombre as facultad, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."') then 1 else null end) as totalprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=1) then 1 else null end) as varonesprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=2) then 1 else null end) as mujeresprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."') then 1 else null end) as totalsegundoperiodo,
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=1) then 1 else null end) as varonessegundoperiodo,
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=2) then 1 else null end) as mujeressegundoperiodo
				FROM personas pe
				JOIN alumnos al ON pe.idpersona = al.idpersona
				JOIN estados_alumno_historial eah ON al.idalumno = eah.idalumno
				JOIN
				(
				SELECT MAX(id) as id, idalumno FROM estados_alumno_historial
				GROUP BY idalumno
				) as info ON eah.id = info.id AND eah.idalumno = info.idalumno
				JOIN carreras c ON al.idplanestudio = c.idcarrera
				JOIN facultades fa ON c.idfacultad = fa.idfacultad
				WHERE eah.idestadoalumno IN (1,2) and al.idplanestudio <> 168 ";

	    if ($idtipocarrera<>'' AND $idtipocarrera<>'0')
	        $sql .= "AND c.idtipocarrera IN (".$idtipocarrera.") ";			

		$sql .=	"GROUP BY fa.idfacultad; ";

		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);

        return $resultado;		     
	}

	public function obtenerAspirantesPeriodoGroupSedeFacultad($desde1, $hasta1, $desde2, $hasta2, $idsede, $idtipocarrera) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."') then 1 else null end) as totalprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=1) then 1 else null end) as varonesprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=2) then 1 else null end) as mujeresprimerperiodo, 
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."') then 1 else null end) as totalsegundoperiodo,
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=1) then 1 else null end) as varonessegundoperiodo,
				  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=2) then 1 else null end) as mujeressegundoperiodo,
				  al.idplanestudio, 
				  se.nombre as sede,
				  fa.nombre as facultad, 
				  c.nombre as carrera, 
				  pl.Letra as letra
				FROM personas pe
						JOIN alumnos al ON pe.idpersona = al.idpersona
						JOIN estados_alumno_historial eah ON al.idalumno = eah.idalumno
						JOIN
						(
						SELECT MAX(id) as id, idalumno FROM estados_alumno_historial
						GROUP BY idalumno
						) as info ON eah.id = info.id AND eah.idalumno = info.idalumno
						JOIN carreras c ON al.idplanestudio = c.idcarrera 
						JOIN planes_estudios pl ON c.idcarrera = pl.idcarrera
						JOIN facultades fa ON c.idfacultad = fa.idfacultad 
		                JOIN sedes se ON al.idsede = se.idsede 
		                WHERE eah.idestadoalumno IN (1,2) and al.idplanestudio <> 168 ";

		if ($idtipocarrera<>'' AND $idtipocarrera<>'0')
			        $sql .= "AND c.idtipocarrera IN (".$idtipocarrera.") ";			

		$sql .=	"GROUP BY al.idsede, fa.idfacultad ORDER BY al.idsede, fa.idfacultad; ";                

		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);

	    return $resultado;		     
	}

	public function obtenerAspirantesPeriodoGroupSede($desde1, $hasta1, $desde2, $hasta2, $idsede, $idtipocarrera) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT
		  se.idsede,
          se.nombre as sede, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."') then 1 else null end) as totalprimerperiodo, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=1) then 1 else null end) as varonesprimerperiodo, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=2) then 1 else null end) as mujeresprimerperiodo, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."') then 1 else null end) as totalsegundoperiodo,
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=1) then 1 else null end) as varonessegundoperiodo,
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=2) then 1 else null end) as mujeressegundoperiodo
		FROM personas pe
						JOIN alumnos al ON pe.idpersona = al.idpersona
						JOIN estados_alumno_historial eah ON al.idalumno = eah.idalumno
						JOIN
						(
						SELECT MAX(id) as id, idalumno FROM estados_alumno_historial
						GROUP BY idalumno
						) as info ON eah.id = info.id AND eah.idalumno = info.idalumno
						JOIN carreras c ON al.idplanestudio = c.idcarrera
						JOIN facultades fa ON c.idfacultad = fa.idfacultad 
		                JOIN sedes se ON al.idsede = se.idsede 
		                WHERE eah.idestadoalumno IN (1,2) and al.idplanestudio <> 168 ";

		if ($idtipocarrera<>'' AND $idtipocarrera<>'0')
			        $sql .= "AND c.idtipocarrera IN (".$idtipocarrera.") ";			

		$sql .=	" GROUP BY al.idsede ORDER BY al.idsede; ";                 

		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);

       	return $resultado;		     
	}

	public function obtenerAspirantesPeriodoGroupTotal($desde1, $hasta1, $desde2, $hasta2, $idsede, $idtipocarrera) {

		// Set the charset
		Doctrine_Manager::getInstance()->setCharset('utf8');
		Doctrine_Manager::getInstance()->setCollate('utf8_general_ci');

		$sql = "SELECT
		  'U.C.U.' as total, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."') then 1 else null end) as totalprimerperiodo, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=1) then 1 else null end) as varonesprimerperiodo, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde1."' and al.fechaIngreso <= '".$hasta1."' and pe.idsexo=2) then 1 else null end) as mujeresprimerperiodo, 
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."') then 1 else null end) as totalsegundoperiodo,
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=1) then 1 else null end) as varonessegundoperiodo,
		  COUNT(distinct al.idalumno * case when ( al.fechaIngreso >= '".$desde2."' and al.fechaIngreso <= '".$hasta2."' and pe.idsexo=2) then 1 else null end) as mujeressegundoperiodo
		FROM personas pe
						JOIN alumnos al ON pe.idpersona = al.idpersona
						JOIN estados_alumno_historial eah ON al.idalumno = eah.idalumno
						JOIN
						(
						SELECT MAX(id) as id, idalumno FROM estados_alumno_historial
						GROUP BY idalumno
						) as info ON eah.id = info.id AND eah.idalumno = info.idalumno
						JOIN carreras c ON al.idplanestudio = c.idcarrera
						JOIN facultades fa ON c.idfacultad = fa.idfacultad 
		                JOIN sedes se ON al.idsede = se.idsede 
		                WHERE eah.idestadoalumno IN (1,2) and al.idplanestudio <> 168 ";

		if ($idtipocarrera<>'' AND $idtipocarrera<>'0')
			        $sql .= " AND c.idtipocarrera IN (".$idtipocarrera.") ";			

		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);
		
        return $resultado;		     
	}

	// Obtiene cantidad de aspirantes por Sexo por Periodo
	public function obtenerUltimosPeriodos($idFacultad) {

       // Calcular rangos de fechas partiendo de fecha actual
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$primeraniod =   $fecha[0] - 2;
				$primeranioh =   $fecha[0] - 1;
				$segundoaniod =  $fecha[0] - 1;
				$segundoanioh =  $fecha[0];
				$ultimoaniod =   $fecha[0];
				$ultimoanioh =   $fecha[0] + 1;
				break;
			default:
				$primeraniod =   $fecha[0] - 3;
				$primeranioh =   $fecha[0] - 2;
				$segundoaniod =  $fecha[0] - 2;
				$segundoanioh =  $fecha[0] - 1;
				$ultimoaniod =   $fecha[0] - 1;
				$ultimoanioh =   $fecha[0];
				break;
		};

		
	// Obtener estadisticas ultimos 3 aÃ±os agrupados por carrera activa
	   $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$primeraniod."-10-01' and al.fechaIngreso <= '".$primeranioh."-09-30') then 1 else null end) as primeranio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$segundoaniod."-10-01' and al.fechaIngreso <= '".$segundoanioh."-09-30') then 1 else null end) as segundoanio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$ultimoaniod."-10-01' and al.fechaIngreso <= '".$ultimoanioh."-09-30') then 1 else null end) as terceranio,
		al.idPlanEstudio,
		c.nombre as carrera,
		fa.nombre as facultad,
		pl.Letra as letra
		FROM alumnos al
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno
		INNER JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN carreras ca ON pl.idCarrera = ca.idCarrera 
		JOIN planes_estudios pl ON c.idcarrera = pl.idcarrera
		INNER JOIN facultades fa ON fa.idFacultad = ca.idFacultad
		WHERE pl.activo = 1 and fa.idFacultad = ".$idFacultad." AND ea.idestadoalumno <> 6 GROUP BY al.idPlanEstudio
		HAVING not (primeranio=0 and segundoanio=0 and terceranio =0);");
				
        return $resultado;		     
	}

public function obtenerUltimosPeriodosSede($idSede) {

       // Calcular rangos de fechas partiendo de fecha actual
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$primeraniod =   $fecha[0] - 2;
				$primeranioh =   $fecha[0] - 1;
				$segundoaniod =  $fecha[0] - 1;
				$segundoanioh =  $fecha[0];
				$ultimoaniod =   $fecha[0];
				$ultimoanioh =   $fecha[0] + 1;
				break;
			default:
				$primeraniod =   $fecha[0] - 3;
				$primeranioh =   $fecha[0] - 2;
				$segundoaniod =  $fecha[0] - 2;
				$segundoanioh =  $fecha[0] - 1;
				$ultimoaniod =   $fecha[0] - 1;
				$ultimoanioh =   $fecha[0];
				break;
		};

		// Obtener estadisticas ultimos 3 aÃ±os agrupados por sede (area q representa una sede)
		$resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$primeraniod."-10-01' and al.fechaIngreso <= '".$primeranioh."-09-30') then 1 else null end) as primeranio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$segundoaniod."-10-01' and al.fechaIngreso <= '".$segundoanioh."-09-30') then 1 else null end) as segundoanio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$ultimoaniod."-10-01' and al.fechaIngreso <= '".$ultimoanioh."-09-30') then 1 else null end) as terceranio,
		al.idPlanEstudio,
		ca.nombre as carrera,
		ar.descripcion as areanombre,
		pl.Letra as letra
		FROM alumnos al
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN ca ON pl.idCarrera = ca.idCarrera
		INNER JOIN areas_carrera ac ON ac.idCarrera = ca.idCarrera 
		INNER JOIN areas ar ON ac.idArea = ar.idArea 
		WHERE pl.activo = 1 and pl.fecha=pl.fechafin and ac.idarea= ".$idSede."  AND al.idestadoalumno <> 6 GROUP BY al.idPlanEstudio
		HAVING not (primeranio=0 and segundoanio=0 and terceranio =0);");
				
        return $resultado;		     
	}


	public function obtenerUltimosPeriodosArea($idFacultad,$idArea,$idSede=1) {

       // Calcular rangos de fechas partiendo de fecha actual
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$primeraniod =   $fecha[0] - 2;
				$primeranioh =   $fecha[0] - 1;
				$segundoaniod =  $fecha[0] - 1;
				$segundoanioh =  $fecha[0];
				$ultimoaniod =   $fecha[0];
				$ultimoanioh =   $fecha[0] + 1;
				break;
			default:
				$primeraniod =   $fecha[0] - 3;
				$primeranioh =   $fecha[0] - 2;
				$segundoaniod =  $fecha[0] - 2;
				$segundoanioh =  $fecha[0] - 1;
				$ultimoaniod =   $fecha[0] - 1;
				$ultimoanioh =   $fecha[0];
				break;
		};

	   // Obtener estadisticas ultimos 3 aÃ±os agrupados por carrera activa
	   $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$primeraniod."-10-01' and al.fechaIngreso <= '".$primeranioh."-09-30') then 1 else null end) as primeranio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$segundoaniod."-10-01' and al.fechaIngreso <= '".$segundoanioh."-09-30') then 1 else null end) as segundoanio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$ultimoaniod."-10-01' and al.fechaIngreso <= '".$ultimoanioh."-09-30') then 1 else null end) as terceranio,
		al.idPlanEstudio,
		ca.nombre as carrera,
		fa.nombre as facultad,
		pl.Letra as letra
		FROM alumnos al 
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN carreras ca ON pl.idCarrera = ca.idCarrera
		INNER JOIN facultades fa ON fa.idFacultad = ca.idFacultad
		INNER JOIN areas_carrera ac ON ac.idCarrera = ca.idCarrera 
		WHERE pl.activo = 1 and pl.fecha=pl.fechafin and ac.idarea=".$idArea." and fa.idFacultad = ".$idFacultad." and al.idSede = ".$idSede." AND ea.idestadoalumno <> 6 GROUP BY al.idPlanEstudio
		HAVING not (primeranio=0 and segundoanio=0 and terceranio =0);");
				
        return $resultado;		     
	}

	public function obtenerNuevosSociosPorAnio($idCriterio) {

       // Calcular rangos de fechas partiendo de fecha actual
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
		$anio= $fecha[0];
		$anio1= $anio -1; $anio2= $anio -2;$anio3= $anio -3;$anio4= $anio -5;$anio5= $anio -5;
		$anio6= $anio -6; $anio7= $anio -7;$anio8= $anio -8;
				
		switch ($idCriterio){
			case 1:
			    $filtro = " (".$anio.",".$anio1.",".$anio2.") ";
				break;
			case 2:
			    $filtro = "( ".$anio.",".$anio1.",".$anio2.",".$anio3."".",".$anio4.") ";
				break;
			case 3:
			    $filtro = "( ".$anio.",".$anio1.",".$anio3.",".$anio4.",".$anio5.",".$anio6.",".$anio7.",".$anio8.") ";
				break;	
			default:
				  $filtro = " (".$anio.",".$anio1.",".$anio2.") ";
				break;
		};
		
	   // Obtener estadisticas ultimos 3 aÃ±os , o 5 o 10
	   $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT COUNT(DISTINCT p.idpersona) as total, COUNT(DISTINCT IF(p.activo, p.idpersona, null)) as total_activos, COUNT(DISTINCT IF(NOT p.activo, p.idpersona, null)) as total_inactivos, YEAR(p.fechaingreso) as anio 
			FROM personas p 
			WHERE p.socio AND YEAR(p.fechaingreso) IN ".$filtro." GROUP BY YEAR(p.fechaingreso) ORDER BY anio desc; ");
				
        return $resultado;		     
	}

	public function obtenerIngresosPorMesAnio($anio, $estado) {

       
	   // Obtener estadisticas ultimos 3 aÃ±os , o 5 o 10
	   $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT SUM(rg.monto) as monto, rg.mes, m.descripcion as mesdescripcion, rg.anio FROM recibos_generados rg JOIN meses m ON rg.mes = m.mes WHERE rg.estado = ".$estado." GROUP BY rg.mes, rg.anio HAVING rg.anio= ".$anio." ORDER BY rg.mes DESC
			; ");
				
        return $resultado;		     
	}
	
    public function obtenerInscriptosxFacultadxArea($idArea) {

       // Calcular rangos de fechas partiendo de fecha actual
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$primeraniod =   $fecha[0] - 2;
				$primeranioh =   $fecha[0] - 1;
				$segundoaniod =  $fecha[0] - 1;
				$segundoanioh =  $fecha[0];
				$ultimoaniod =   $fecha[0];
				$ultimoanioh =   $fecha[0] + 1;
				break;
			default:
				$primeraniod =   $fecha[0] - 3;
				$primeranioh =   $fecha[0] - 2;
				$segundoaniod =  $fecha[0] - 2;
				$segundoanioh =  $fecha[0] - 1;
				$ultimoaniod =   $fecha[0] - 1;
				$ultimoanioh =   $fecha[0];
				break;
		};
		
	   // Obtener estadisticas ultimos 3 aÃ±os agrupados por facultad/area
	   $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$primeraniod."-10-01' and al.fechaIngreso <= '".$primeranioh."-09-30') then 1 else null end) as primeranio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$segundoaniod."-10-01' and al.fechaIngreso <= '".$segundoanioh."-09-30') then 1 else null end) as segundoanio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$ultimoaniod."-10-01' and al.fechaIngreso <= '".$ultimoanioh."-09-30') then 1 else null end) as terceranio,
		fa.nombre as facultad,
		pl.Letra as letra
		FROM alumnos al 
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN carreras ca ON pl.idCarrera = ca.idCarrera
		INNER JOIN facultades fa ON fa.idFacultad = ca.idFacultad
		INNER JOIN areas_carrera ac ON ac.idCarrera = ca.idCarrera 
		WHERE pl.activo = 1 and pl.fecha=pl.fechafin and ac.idarea = ".$idArea."  AND ea.idestadoalumno <> 6 GROUP BY fa.idFacultad
		HAVING not (primeranio=0 and segundoanio=0 and terceranio =0);");
				
        return $resultado;		     
	}
	
	// Obtener estadisticas x Area
    public function obtenerInscriptosxArea() {
       // POr ahora las areas son fijas = (1, 32, 33, 17, 18)
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$primeraniod =   $fecha[0] - 2;
				$primeranioh =   $fecha[0] - 1;
				$segundoaniod =  $fecha[0] - 1;
				$segundoanioh =  $fecha[0];
				$ultimoaniod =   $fecha[0];
				$ultimoanioh =   $fecha[0] + 1;
				break;
			default:
				$primeraniod =   $fecha[0] - 3;
				$primeranioh =   $fecha[0] - 2;
				$segundoaniod =  $fecha[0] - 2;
				$segundoanioh =  $fecha[0] - 1;
				$ultimoaniod =   $fecha[0] - 1;
				$ultimoanioh =   $fecha[0];
				break;
		};
		
	   // Obtener estadisticas ultimos 3 aÃ±os agrupados por area
	   $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$primeraniod."-10-01' and al.fechaIngreso <= '".$primeranioh."-09-30') then 1 else null end) as primeranio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$segundoaniod."-10-01' and al.fechaIngreso <= '".$segundoanioh."-09-30') then 1 else null end) as segundoanio,
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$ultimoaniod."-10-01' and al.fechaIngreso <= '".$ultimoanioh."-09-30') then 1 else null end) as terceranio,
		ar.descripcion as area,
		ar.idarea
		FROM alumnos al 
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN carreras ca ON pl.idCarrera = ca.idCarrera
		INNER JOIN facultades fa ON fa.idFacultad = ca.idFacultad
		INNER JOIN areas_carrera ac ON ac.idCarrera = ca.idCarrera 
		INNER JOIN areas ar ON ac.idarea = ar.idarea
		WHERE pl.activo = 1 and pl.fecha=pl.fechafin and ac.idarea in (1, 32, 33, 17, 18, 34) AND ea.idestadoalumno <> 6 GROUP BY ar.idarea
		HAVING not (primeranio=0 and segundoanio=0 and terceranio =0);");
				
        return $resultado;		     
	}

    // Obtiene nuevos inscriptos por ciudad de Origen
	public function nixciudadorigen($idArea, $anio, $idSede=1) {
    
        $anioinicial  = $anio - 1;
			
	    // Obtener estadisticas ultimos 3 aÃ±os agrupados por carrera activa
	    $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$anioinicial."-10-01' and al.fechaIngreso <= '".$anio."-09-30') then 1 else null end) as anioactual,
		pe.idciudadnac,
		ci.descripcion
		FROM alumnos al 
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN personas pe ON al.idPersona = pe.idPersona
		INNER JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN carreras ca ON pl.idCarrera = ca.idCarrera
		INNER JOIN areas_carrera ac ON ca.idCarrera = ac.idCarrera
		LEFT JOIN ciudades ci on pe.idciudadnac = ci.idciudad
		WHERE pl.activo = 1 and ac.idArea = ".$idArea." and al.idSede = ".$idSede." AND ea.idestadoalumno <> 6 GROUP BY pe.idciudadnac
		HAVING not ( anioactual < 1)
		order by anioactual desc;");
				
        return $resultado;		     
	}
	
    // Obtiene nuevos inscriptos por ciudad de Origen
	public function nixciudadresidencia($idArea, $anio) {
    
        $anioinicial  = $anio - 1;
			
	    // Obtener estadisticas ultimos 3 aÃ±os agrupados por carrera activa
	    $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * case when ( al.fechaIngreso >= '".$anioinicial."-10-01' and al.fechaIngreso <= '".$anio."-09-30') then 1 else null end) as anioactual,
		pe.idciudadnac,
		ci.descripcion
		FROM alumnos al 
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN personas pe ON al.idPersona = pe.idPersona
		INNER JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		INNER JOIN carreras ca ON pl.idCarrera = ca.idCarrera
		INNER JOIN areas_carrera ac ON ca.idCarrera = ac.idCarrera
		LEFT JOIN ciudades ci on pe.idciudadnac = ci.idciudad
		WHERE pl.activo = 1 and ac.idArea = ".$idArea." AND ea.idestadoalumno <> 6 GROUP BY pe.idciudadnac
		HAVING not ( anioactual < 1)
		order by anioactual desc;");
				
        return $resultado;		     
	}
	
    // Obtiene nuevos inscriptos por ciudad de Origen
	public function nixciudadresidenciaxcarrera($idCarrera) {
        
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$anio =   $fecha[0] + 1;
				break;
			default:
				$anio =   $fecha[0] ;
				break;
		};
		
        $anioinicial  = $anio - 1;
			
	  // Obtener estadisticas ultimos 3 aÃ±os agrupados por carrera activa
	    $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno) as activos,
		co.idciudade,
		ci.descripcion
		FROM alumnos al 
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN personas pe ON al.idPersona = pe.idPersona
		INNER JOIN contactos co on pe.idpersona = co.idpersona
		INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
		INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
		LEFT JOIN ciudades ci on co.idciudade = ci.idciudad
		WHERE 
		pl.idestadoplan = 2 AND ea.idestadoalumno <> 6 and ca.idcarrera = ".$idCarrera." and
		al.fechaIngreso >= '".$anioinicial."-10-01' and al.fechaIngreso <= '".$anio."-09-30'
		GROUP BY co.idciudade
		HAVING not ( activos < 1)
		ORDER BY activos DESC;");
				
        return $resultado;		     
	}
	
	// Obtiene nuevos inscriptos por franja etarea x Carrera
	public function nixfranjaetareaxcarrera($idCarrera) {
        
		$fecha = explode("-", date("Y-m-d"));
				
		switch ($fecha[1]){
			case 10:
			case 11:
			case 12:
				$anio =   $fecha[0] + 1;
				break;
			default:
				$anio =   $fecha[0] ;
				break;
		};
		
        $anioinicial  = $anio - 1;
			
	  // Obtener informacion por carrera, fragmentada por rango de edad
	    $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)<18,1,null)) as menos18,
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)>=18 and FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)<=21,1,null)) as e18a21,
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)>=22 and FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)<=25,1,null)) as e22a25,
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)>=26 and FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)<=30,1,null)) as e26a30,
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)>=31 and FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)<=35,1,null)) as e31a35,
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)>=36 and FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)<=40,1,null)) as e36a40,
		COUNT(distinct al.idAlumno * if(FLOOR(DATEDIFF(CURRENT_DATE,fechanac)/365)>=41,1,null)) as mas40 
		FROM alumnos al
		INNER JOIN ( 
			SELECT * FROM (
    			SELECT * 
    			FROM estados_alumno_historial
    			ORDER BY fecha DESC, id DESC
			) AS eah
			GROUP BY eah.idalumno
    	) AS ea	ON al.idalumno = ea.idalumno		
		INNER JOIN personas pe ON al.idPersona = pe.idPersona
		INNER JOIN contactos co on pe.idpersona = co.idpersona
		INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
		INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
		LEFT JOIN ciudades ci on co.idciudade = ci.idciudad
		WHERE 
		pl.activo = 1 AND ea.idestadoalumno <> 6 and ca.idcarrera = ".$idCarrera." and
		al.fechaIngreso >= '".$anioinicial."-10-01' and al.fechaIngreso <= '".$anio."-09-30'
		;");
				
        return $resultado;		     
	}
	
	public function obtenerUltimosPeriodosCarrera($idCarrera,$idArea, $idSede) { 
 		// Calcular rangos de fechas partiendo de fecha actual
		// Se calculan los 3 periodos de los cuales se va a obtener informacion
		$fecha = explode("-", date("Y-m-d"));
		if ($fecha[1]>8) {
		    $desde=date("Y");
		    $hasta=date("Y")+1;
		} else {
		    $desde=date("Y")-1;
		    $hasta=date("Y");
		}
		
		$last_year = (date("Y-m-d")>=$fecha[0]."04-01" and date("Y-m-d")<=$fecha[0]."09-30")?$desde:$hasta;
		$first_year = $last_year - 3;
		$second_year = $last_year - 2;
		$thirdt_year = $last_year - 1;
		$initial_year = $last_year - 4;
		$sql = "";
		
		$contar = 0;  
		for ($anio = $initial_year; $anio<$last_year;$anio++){
			
			$siganio = $anio + 1;// calculo sig. aÃ±o
			
			if ($anio == $initial_year){
			   $sql = "SELECT ".$anio." as anio, 10 as mes UNION SELECT ".$anio.", 11 UNION SELECT ".$anio." as anio, 12 as mes UNION SELECT ".$siganio." as anio, 1 as mes UNION SELECT ".$siganio." as anio, 2 as mes UNION SELECT ".$siganio." as anio, 3 as mes ";
		    } else {
		       $sql .= "UNION SELECT ".$anio." as anio, 10 as mes UNION SELECT ".$anio." as anio, 11 as mes UNION SELECT ".$anio." as anio, 12 as mes UNION SELECT ".$siganio." as anio, 1 as mes UNION SELECT ".$siganio." as anio, 2 as mes UNION SELECT ".$siganio." as anio, 3 as mes ";
		    }	
		}
		
		// Obtener estadisticas por carrera, alumnos inscriptos ultimos 4 aÃ±os
	    $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT 
		mesesanios.anio, 
		mesesanios.mes,
		if(resultados.totalalumnos is null, 0, resultados.totalalumnos) as totalalumnos, 
		resultados.carrera, 
		resultados.letra
		 FROM
		    (
			  ".$sql." 
			) AS mesesanios 
		LEFT JOIN 
		(    
		select 
		    COUNT(*) as totalalumnos,
		    al.idPlanEstudio,
		    ca.nombre as carrera,
		    pl.Letra as letra,
		    YEAR(al.fechaIngreso) as anioing, MONTH(al.fechaIngreso) as mesing
		FROM alumnos al
		JOIN (SELECT MAX(id) as id, idalumno FROM estados_alumno_historial GROUP BY idalumno) as esta ON al.idalumno = esta.idalumno
		JOIN estados_alumno_historial ea ON esta.id = ea.id
		JOIN planes_estudios pl ON al.idPlanEstudio = pl.idPlanEstudio
		JOIN carreras ca ON pl.idCarrera = ca.idCarrera
		WHERE al.idPlanEstudio = ".$idCarrera." AND ea.idestadoalumno NOT IN (2, 6) and al.fechaIngreso >= '".$initial_year."-10-01'
		and al.fechaIngreso <= '".$last_year."-03-31' and al.idsede = ".$idSede."
		GROUP BY YEAR(al.fechaIngreso), MONTH(al.fechaIngreso)
		HAVING mesing IN (10, 11, 12, 1, 2, 3)
		) AS resultados
		ON mesesanios.anio = resultados.anioing AND mesesanios.mes = resultados.mesing;");
	    
	    return $resultado;
   }

   public function obtenerAlumnosxActividad($Anio=null) {
   	  /////////////////////////////////////////////////////
		//conexion webservice alumnos
		/*$soapclient = new nusoap_client(sfConfig::get('app_wsestadisticas_alumnos'));
		$soapclient->setCredentials("root", "sistemas2009");
		
		// llamamos la funciÃ³n implementada en el webservices
		$resultadoSoap = $soapclient->call('obtenerAlumnosxActividad',
			array('idArea' => $idArea, 'Anio' => $Anio)		
		);
						       
		$alumnos_actividad = unserialize(base64_decode($resultadoSoap)); */

		 // Definir rango de fechas a consultar 
        $fecha_desde = $Anio."-01-01";
	    $fecha_hasta = $Anio."-12-31";

			
	    // Obtener estadisticas ultimos 3 aÃ±os agrupados por carrera activa
	    $alumnos_actividad = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT 
         COUNT(distinct a.idalumno ) as total,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1,1,null)) as enero,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2,1,null)) as febrero,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3,1,null)) as marzo,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4,1,null)) as abril,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5,1,null)) as mayo,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6,1,null)) as junio,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6 or MONTH(datos2.fecha)=7,1,null)) as julio,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6 or MONTH(datos2.fecha)=7 or MONTH(datos2.fecha)=8,1,null)) as agosto,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6 or MONTH(datos2.fecha)=7 or MONTH(datos2.fecha)=8 or MONTH(datos2.fecha)=9,1,null)) as septiembre,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6 or MONTH(datos2.fecha)=7 or MONTH(datos2.fecha)=8 or MONTH(datos2.fecha)=9 or MONTH(datos2.fecha)=10,1,null)) as octubre,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6 or MONTH(datos2.fecha)=7 or MONTH(datos2.fecha)=8 or MONTH(datos2.fecha)=9 or MONTH(datos2.fecha)=10 or MONTH(datos2.fecha)=11,1,null)) as noviembre,
         COUNT(distinct a.idalumno * if(MONTH(datos2.fecha)=1 or MONTH(datos2.fecha)=2 or MONTH(datos2.fecha)=3 or MONTH(datos2.fecha)=4 or MONTH(datos2.fecha)=5 or MONTH(datos2.fecha)=6 or MONTH(datos2.fecha)=7 or MONTH(datos2.fecha)=8 or MONTH(datos2.fecha)=9 or MONTH(datos2.fecha)=10 or MONTH(datos2.fecha)=11 or MONTH(datos2.fecha)=12,1,null)) as diciembre,
         year(datos2.fecha) as anio,
         se.nombre as Sede 
         FROM       
         (
            SELECT idalumno, fecha FROM alu_mat WHERE fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."') AND idestadomateria IN (1,2,3)
            UNION
            SELECT e.idalumno, me.fecha FROM mesas_examenes me JOIN examenes e ON me.idmesaexamen = e.idmesaexamen 
            WHERE me.fecha BETWEEN DATE('".$fecha_desde."') and DATE('".$fecha_hasta."')
         ) as datos2 
         JOIN alumnos a ON datos2.idalumno = a.idalumno
		 JOIN planes_estudios pe ON a.idplanestudio = pe.idplanestudio  
		 JOIN carreras car ON pe.idcarrera = car.idcarrera    
		 JOIN personas p ON a.idpersona = p.idpersona 
         JOIN sedes se ON a.idsede = se.idsede 
         WHERE car.idtipocarrera NOT IN (1,2,6) 
         GROUP BY se.idsede, YEAR(datos2.fecha) ORDER BY se.idsede;");
				
        return $alumnos_actividad;
   }

   public function obtenerAlumnosSCentralxActividad($Anio=null) {
   	  /////////////////////////////////////////////////////
		//conexion webservice alumnos
		/*$soapclient = new nusoap_client(sfConfig::get('app_wsestadisticas_alumnos'));
		$soapclient->setCredentials("root", "sistemas2009");
		
		// llamamos la funciÃ³n implementada en el webservices
		$resultadoSoap = $soapclient->call('obtenerAlumnosSCentralxActividad',
			array('idArea' => $idArea, 'Anio' => $Anio)		
		);
						       
		$alumnos_actividad_sc = unserialize(base64_decode($resultadoSoap)); */ 

		$fecha_desde = $Anio."-01-01";
	    $fecha_hasta = $Anio."-12-31";

			
	    //estadisticas de alumnos segun actividad academica y separado por ciudad para sede 1
	    $alumnos_actividad_sc = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT 
					COUNT(distinct a.idalumno ) as hastadiciembre,
					COUNT(distinct a.idalumno * if( p.idciudadnac=734,1,null)) as soloconcepcion,
					COUNT(distinct a.idalumno * if( p.idciudadnac<>734,1,null)) as distintoconcepcion,
					COUNT(distinct a.idalumno * if( IFNULL(p.idciudadnac,'')='',1,null)) as sininformacion, 
					year(datos2.fecha) as anio, 
					se.nombre as Sede 
					FROM ( 
					   SELECT idalumno, fecha FROM alu_mat WHERE fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."') AND idestadomateria IN (1,2,3) 
					   UNION 
					   SELECT e.idalumno, me.fecha FROM mesas_examenes me JOIN examenes e ON me.idmesaexamen = e.idmesaexamen WHERE me.fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."')
					   ) as datos2 
					   JOIN alumnos a ON datos2.idalumno = a.idalumno
					   JOIN planes_estudios pe ON a.idplanestudio = pe.idplanestudio  
					   JOIN carreras car ON pe.idcarrera = car.idcarrera    
					   JOIN personas p ON a.idpersona = p.idpersona 
					   JOIN sedes se ON a.idsede = se.idsede 
					   WHERE a.idsede = 1 AND car.idtipocarrera NOT IN (1,2,6) 
					   GROUP BY se.idsede, YEAR(datos2.fecha) ORDER BY se.idsede;");

		return $alumnos_actividad_sc;
   }

   public function obtenerAlumnosxActividadxSedexFacultad($Anio=null) {
   	  /////////////////////////////////////////////////////
		//conexion webservice alumnos
		/*$soapclient = new nusoap_client(sfConfig::get('app_wsestadisticas_alumnos'));
		$soapclient->setCredentials("root", "sistemas2009");
		
		// llamamos la funciÃ³n implementada en el webservices
		$resultadoSoap = $soapclient->call('obtenerAlumnosxActividadxSedexFacultad',
			array('idArea' => $idArea, 
			      'Anio' => $Anio)		
		);
						       
		$alumnos_actividad_sc = unserialize(base64_decode($resultadoSoap)); */ 

		$fecha_desde = $Anio."-01-01";
	    $fecha_hasta = $Anio."-12-31";

			
	    //estadisticas de alumnos segun actividad academica y separado por ciudad para sede 1
	    $alumnos_actividad_sc = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT car.nombre as carrera,
					         COUNT(distinct a.idalumno) as cantidad,
					         COUNT(distinct a.idalumno * IF(p.idsexo = 1, 1,NULL)) as totalm,
					         COUNT(distinct a.idalumno * IF(p.idsexo = 2, 1,NULL)) as totalf , 
							 year(datos2.fecha) as anio, 
							 se.nombre as Sede 
					FROM ( 
					   SELECT idalumno, fecha FROM alu_mat WHERE fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."') AND idestadomateria IN (1,2,3) 
					   UNION 
					   SELECT e.idalumno, me.fecha FROM mesas_examenes me JOIN examenes e ON me.idmesaexamen = e.idmesaexamen WHERE me.fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."')
					   ) as datos2 
					   JOIN alumnos a ON datos2.idalumno = a.idalumno
					   JOIN planes_estudios pe ON a.idplanestudio = pe.idplanestudio  
					   JOIN carreras car ON pe.idcarrera = car.idcarrera    
					   JOIN personas p ON a.idpersona = p.idpersona 
					   JOIN sedes se ON a.idsede = se.idsede 
					   WHERE car.idtipocarrera NOT IN (1,2,6) 
					   GROUP BY se.idsede, car.idcarrera ORDER BY se.idsede, car.nombre;");

		return $alumnos_actividad_sc;
   }

   public function obtenerAlumnosxActividadxAreaxFacultad($Anio=null) {
   	  /////////////////////////////////////////////////////
		//conexion webservice alumnos
		/*$soapclient = new nusoap_client(sfConfig::get('app_wsestadisticas_alumnos'));
		$soapclient->setCredentials("root", "sistemas2009");
		
		// llamamos la funciÃ³n implementada en el webservices
		$resultadoSoap = $soapclient->call('obtenerAlumnosxActividadxAreaxFacultad',
			array('idArea' => $idArea, 
			      'Anio' => $Anio)		
		);
						       
		$alumnos_actividad_areaf = unserialize(base64_decode($resultadoSoap));*/

		$fecha_desde = $Anio."-01-01";
	    $fecha_hasta = $Anio."-12-31";

			
	    //estadisticas de alumnos segun actividad academica y separado por ciudad para sede 1
	    $alumnos_actividad_areaf = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT fac.nombre as facultad,
					         COUNT(distinct a.idalumno) as cantidad,
					         COUNT(distinct a.idalumno * IF(p.idsexo = 1, 1,NULL)) as totalm,
					         COUNT(distinct a.idalumno * IF(p.idsexo = 2, 1,NULL)) as totalf , 
							 year(datos2.fecha) as anio, 
							 se.nombre as Sede 
					FROM ( 
					   SELECT idalumno, fecha FROM alu_mat WHERE fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."') AND idestadomateria IN (1,2,3) 
					   UNION 
					   SELECT e.idalumno, me.fecha FROM mesas_examenes me JOIN examenes e ON me.idmesaexamen = e.idmesaexamen WHERE me.fecha BETWEEN date('".$fecha_desde."') and date('".$fecha_hasta."')
					   ) as datos2 
					   JOIN alumnos a ON datos2.idalumno = a.idalumno
					   JOIN planes_estudios pe ON a.idplanestudio = pe.idplanestudio  
					   JOIN carreras car ON pe.idcarrera = car.idcarrera 
					   JOIN facultades fac ON car.idfacultad = fac.idfacultad   
					   JOIN personas p ON a.idpersona = p.idpersona 
					   JOIN sedes se ON a.idsede = se.idsede 
					   WHERE car.idtipocarrera NOT IN (1,2,6) 
					   GROUP BY se.idsede, fac.idfacultad ORDER BY se.idsede, fac.nombre;");

		return $alumnos_actividad_areaf;
   }

  /* Esta funcion se debe habilitar cuando se obtenga directamente desde el sistema
   public function obtenerAlumnosxActividad($idArea=null, $Anio=null) { 

 // Calcular rangos de fechas partiendo de fecha actual
       // Se calculan los 3 periodos de los cuales se va a obtener informacion
		 if (isnull($idArea))
             $idArea = "1";
         else
             $idArea =" 1, 32, 33, 17, 18, 34 ";

       // Definir rango de fechas a consultar 
         if (isnull($Anio))
             $Anio = "2012";

         $fecha_desde = date("Y")."01-01";
	     $fecha_hasta = date("Y")."12-31";
		 $sql = "";
		
				
	// Obtener estadisticas por carrera, alumnos inscriptos ultimos 4 aÃ±os
	    $resultado = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("SELECT 
        COUNT(distinct p.idPersona * if(MONTH(fecha)=1,1,null)) as enero,
        COUNT(distinct p.idPersona * if(MONTH(fecha)=1 or MONTH(fecha)=2,1,null)) as febrero,
        COUNT(distinct p.idPersona * if(MONTH(fecha)=1 or MONTH(fecha)=2 or MONTH(fecha)=3,1,null)) as marzo,
        COUNT(distinct p.idPersona * if(MONTH(fecha)=1 or MONTH(fecha)=2 or MONTH(fecha)=3 or MONTH(fecha)=4,1,null)) as abril,
        year(datos2.fecha) as anio,
        ac.idArea, ar.descripcion as Area 
        FROM       
        (
            SELECT idAlumno as idAlumno, fecha FROM AluMat WHERE (fecha between date('2012-01-01') and date('2012-12-31'))
            UNION
            SELECT e.idAlumno as idAlumno, fecha FROM FechasExamenes fe INNER JOIN Examenes e ON fe.idFechaExamen = e.idFechaExamen where
            (fe.fecha between date('2012-01-01') and date('2012-12-31')) 
        ) as datos2 
        INNER JOIN Alumnos a on datos2.idAlumno = a.idAlumno 
        INNER JOIN Personas p on a.idPersona = p.idPersona
        INNER JOIN AreasCarrera ac on a.idPlanEstudio = ac.idCarrera
        INNER JOIN Areas ar on ac.idArea = ar.idArea
        WHERE ac.idArea in (1, 32, 33, 17, 18, 34) 
        GROUP BY ac.idArea, year(datos2.fecha) ORDER BY ac.idArea;");
	    
	    return $resultado;
} */	
	
}