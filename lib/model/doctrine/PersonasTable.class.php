<?php

/**
 * PersonasTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PersonasTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PersonasTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Personas');
    } 

  // Busca la persona
  public static function buscarPersona($tipo, $criterio) {
		$where="";
    	if($tipo!=""){
			$where = " AND p.idtipodoc = ".$tipo;
		}
    	$q = Doctrine_Query::create()
	  		->select("*")
	 		->from("Personas p")
	 		->where("p.nrodoc = ".$criterio.$where)
	    	->fetchOne();
	       
        return $q;
    }	

    // Obtener designaciones por persona, filtrando tambien por area y sede
    public static function obtenerRecibosAGenerar()
    {
        $sql ="SELECT per.idpersona, per.nombre, per.apellido, '10' as monto, mc.mes, DATE_FORMAT(NOW(), '%Y-%m-%d') AS fecha
        FROM
        personas per JOIN meses_cobro mc ON per.idpersona = mc.idpersona
        WHERE mc.mes = MONTH(NOW()); ";
        
        $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql);

        return $q;
    }  

    // crear recibos de personas seleccionadas
    public static function crearRecibos($arrPersonas)
    {
        
        // Definir elemenos para filtrar por IN
        $datos=''; $cantidad=0;
        foreach($arrDesignaciones as $info)
            $datos .= $info.', ';
        
        $datos = substr($datos, 0, strlen($datos)-2);

        // actualizar designaciones
        $sql = "INSERT INTO recibosgenerados SELECT per.idpersona, per.nombre, per.apellido, '10' as monto,  DATE_FORMAT(NOW(), '%Y-%m-%d') AS fecha, MONTH(NOW()) as mes 
        WHERE idpersona IN (".$datos.");";
        
        $q = Doctrine_Manager::getInstance()->getCurrentConnection();
        
        return $q->execute($sql);
    }  

    // Obtiene todas las carreras asociadas a una persona
	public static function obtenerCarrerasPersona($nrodoc)
	{
		$q = Doctrine_Query::create()
			->select('a.*,pe.*, c.idcarrera as idcarrera, c.nombrereducido as nombrereducido')
			->from("Alumnos a")
			->innerJoin('a.Personas p ON a.idpersona = p.idpersona')
			->innerJoin('a.PlanesEstudios pe ON a.idplanestudio = pe.idplanestudio')	 
			->innerJoin('pe.Carreras c ON pe.idcarrera = c.idcarrera')	 	 						
			->where("(p.nrodoc ='".$nrodoc."')")
			->andWhere("c.idtipocarrera <> 5 and c.idtipocarrera <> 6");
        		    														    
		return $q->execute();
	}  

    // Obtiene todas las carreras asociadas a una persona
	public static function obtenerCarrerasActivasPersona($nrodoc)
	{
		$q = Doctrine_Query::create()
			->select('a.*,pe.*, c.idcarrera as idcarrera, c.nombrereducido as nombrereducido, pe.activo')
			->from("Alumnos a")
			->innerJoin('a.Personas p ON a.idpersona = p.idpersona')
			->innerJoin('a.PlanesEstudios pe ON a.idplanestudio = pe.idplanestudio')	 
			->innerJoin('pe.Carreras c ON pe.idcarrera = c.idcarrera')	 	 						
			->where("(p.nrodoc ='".$nrodoc."')")
			->andWhere("pe.idestadoplan=2")
			->andWhere("c.idtipocarrera <> 5 and c.idtipocarrera <> 6 and c.idtipocarrera <> 2");
        		    														    
		return $q->execute();
	}  

   // Obtener profesores por facultad
    public static function obtenerProfesoresxfacultad()
    {
        $idfacultad = Doctrine_Core::getTable('AreasCarrera')->obtenerFacultadxdesignacion();
        
        $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre
			FROM personas p 
			INNER JOIN profesores pr on p.idpersona = pr.idpersona
			WHERE pr.idfacultad = ".$idfacultad
        );
       
        return $q;
    } 

    // Busca todas los alumnos segun los criterios
    public static function obtenerPersonasnoprofesores($tipocriterio, $criterio)
    {   
        $idfacultad = Doctrine_Core::getTable('AreasCarrera')->obtenerFacultadxdesignacion();
        
        if ($tipocriterio == 1) {
			$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre, nrodoc
				FROM personas p 
				LEFT JOIN profesores pr on p.idpersona = pr.idpersona
				WHERE (pr.idfacultad is null or pr.idfacultad <> ".$idfacultad.") AND p.apellido LIKE '".$criterio."%'"
        	);
        } else {
			$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre, nrodoc
				FROM personas p 
				LEFT JOIN profesores pr on p.idpersona = pr.idpersona
				WHERE (pr.idfacultad is null or pr.idfacultad <> ".$idfacultad.") AND p.nrodoc LIKE '".$criterio."%'"
			);
        }       
        
        return $q;
    }   

    // Busca todas las personas segun criterios
    public static function obtenerPersonas($tipocriterio, $criterio, $criterio2 = "1")
    {   
        if ($tipocriterio == 1) {
			$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre, nrodoc, idsexo
				FROM personas p 
				WHERE p.apellido LIKE '".$criterio."%'"
        	);
        } else {
			$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre, nrodoc, idsexo
				FROM personas p 
				WHERE p.nrodoc LIKE '".$criterio."%' AND p.idtipodoc = ".$criterio2." "
        	);
        }       
        
        return $q;
    }  

       // Busca todas los alumnos segun los criterios
    public static function obtenerEgresados($tipocriterio, $criterio)
    {   
        $criterioa = "WHERE e.idestadoalumno = 3 ";
        
        if ($tipocriterio == 1) {
            $criterioa .= " AND p.apellido LIKE '".$criterio."%'";
        } else {
            $criterioa .= " AND p.nrodoc LIKE '".$criterio."%'";
        }
        
        if ($tipocriterio == 1) {
			$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre, concat(c.nombre, ' - ', pe.nombre) as carrera, s.nombre as sede, e.fecha as fechaegreso
            	FROM personas p 
            	INNER JOIN alumnos a on p.idpersona = a.idpersona
            	INNER JOIN estados_alumno_historial e on a.idalumno = e.idalumno
            	INNER JOIN planes_estudios pe on a.idplanestudio = pe.idplanestudio
            	INNER JOIN carreras c on pe.idCarrera = c.idCarrera
            	INNER JOIN sedes s on a.idsede = s.idsede ".$criterioa." ORDER BY s.idsede, c.idCarrera, p.apellido"
        	);
        } else {
			$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
				SELECT p.idpersona, concat(p.apellido, ', ', p.nombre) as nombre, concat(c.nombre, ' - ', pe.nombre) as carrera, s.nombre as sede, e.fecha as fechaegreso
            	FROM personas p 
            	INNER JOIN alumnos a on p.idpersona = a.idpersona
            	INNER JOIN estados_alumno_historial e on a.idalumno = e.idalumno
            	INNER JOIN planes_estudios pe on a.idplanestudio = pe.idplanestudio
            	INNER JOIN carreras c on pe.idCarrera = c.idCarrera
            	INNER JOIN sedes s on a.idsede = s.idsede ".$criterioa." ORDER BY s.idsede, c.idCarrera, p.apellido"
        	);
        }       
        
        return $q;
    }  

       // Total egresados detallado por rango
    public static function detalleEgresadosPorRango($fechadesde, $fechahasta)
    {   
        $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT  s.nombre as sede,
              f.nombre as facultad,
              concat(c.nombre, ' - ', pe.nombre) as carrera,
              concat(p.apellido, ' ', p.nombre) as nombre,
              e.fecha as fechaegreso,
              if(p.idsexo=1, 'M','F') as sexo
            FROM personas p 
            INNER JOIN alumnos a on p.idpersona = a.idpersona
            INNER JOIN estados_alumno_historial e on a.idalumno = e.idalumno
            INNER JOIN planes_estudios pe on a.idplanestudio = pe.idplanestudio
            INNER JOIN carreras c on pe.idCarrera = c.idCarrera
            INNER JOIN facultades f on c.idfacultad = f.idFacultad
            INNER JOIN sedes s on a.idsede = s.idsede
            WHERE e.idestadoalumno = 3 AND e.fecha between date('".$fechadesde."') and date('".$fechahasta."')
            ORDER BY s.idsede, f.idFacultad, c.idCarrera, p.apellido"
        );
        
        return $q;
    }   

       //total egresados por rango
    public static function totalEgresadosPorRango($fechadesde, $fechahasta)
    {   
        $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT  s.nombre as sede,
              f.nombre as facultad,
              CONCAT(c.nombre, ' - ', pe.nombre) as carrera,
              COUNT(distinct p.idpersona * CASE WHEN ( p.idsexo=1 ) THEN 1 ELSE null END) as varones,
              COUNT(distinct p.idpersona * CASE WHEN ( p.idsexo=2) THEN 1 ELSE null END) as mujeres,
              COUNT(p.idpersona) as total
            FROM personas p 
            INNER JOIN alumnos a on p.idpersona = a.idpersona
            INNER JOIN estados_alumno_historial e on a.idalumno = e.idalumno
            INNER JOIN planes_estudios pe on a.idplanestudio = pe.idplanestudio
            INNER JOIN carreras c on pe.idCarrera = c.idCarrera
            INNER JOIN facultades f on c.idfacultad = f.idFacultad
            INNER JOIN sedes s on a.idsede = s.idsede
            WHERE e.idestadoalumno = 3 AND e.fecha between date('".$fechadesde."') and date('".$fechahasta."')
            GROUP BY s.idsede, f.idfacultad, c.idCarrera
            ORDER BY s.idsede, f.idFacultad, c.idCarrera"
        );
        return $q;
    }                  
}
