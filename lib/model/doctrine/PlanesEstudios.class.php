<?php

/**
 * PlanesEstudios
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sig
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PlanesEstudios extends BasePlanesEstudios
{ 
    public function __toString() {
        return $this->getCarreras()->getNombre()." - ".$this->getNombre();
    }	

  // Obtiene todas las mesas de examenes abiertas para dicho plan 
  public function activar() 
    {	   		    
    	// Desactiva el plan Activo Vigente
    	$q = Doctrine_Query::create()
  			->update('PlanesEstudios p')
  			->set('p.idestadoplan', '4')
  			->where('p.idcarrera = ?', $this->getIdcarrera())
  			->andWhere('p.idestadoplan = ?', 2)
  			->execute();
  				
  		// Activa el plan 
    	$q = Doctrine_Query::create()
  			->update('PlanesEstudios p')
  			->set('p.idestadoplan', '2')
  			->where('p.idplanestudio = ?', $this->getIdplanestudio());

  		return $q->execute();
    }

    // Obtiene se debe controlar los horarios
    public function controlarHorarios()
    {
    	$q = Doctrine_Query::create()
    		->select('COUNT(*) as cantidad')
    		->from('AsignacionesClases ac')
    		->innerJoin('ac.Comisiones co ON ac.idcomision=co.idcomision')
    		->innerJoin('co.Catedras ca ON co.idcatedra=ca.idcatedra')
    		->innerJoin('ca.MateriasPlanes mp ON ca.idmateriaplan=mp.idmateriaplan')
    		->where('mp.idplanestudio = '.$this->getIdplanestudio())
    		->fetchOne();
    	
    		if ($q->cantidad > 0) {
    			$resultado = 1;
    		} else {
    			$resultado = 0;
    		}
    	return $resultado;
    }    
    
  // Obtiene todas las mesas de examenes abiertas para dicho plan 
  public function obtenerMesasExamenes($estado, $idsede) 
    {	   		    
    	$q = Doctrine_Query::create()
	  		->select('me.*, (SELECT Count(DISTINCT e.idalumno) FROM Examenes e WHERE e.idmesaexamen = me.idmesaexamen) AS cantidad')
	 		->from('MesasExamenes me')
	 		->innerJoin('me.Catedras ct ON ct.idcatedra = me.idcatedra')
	 		->innerJoin('ct.MateriasPlanes mp ON mp.idmateriaplan = ct.idmateriaplan')
	 		->where('mp.idplanestudio = '.$this->getIdplanestudio())
   	    	->andWhere('me.idestadomesaexamen = '.$estado)
			->andWhere('ct.idsede = '.$idsede);
	       
		return $q->execute();		
    }	

  // Obtiene todas las mesas de examenes abiertas para dicho plan 
  public function obtenerMesasExamenesCatedra($idcatedra,$estado) 
    {	   		    
    	$q = Doctrine_Query::create()
	  		->select('me.*, (SELECT Count(DISTINCT e.idalumno) FROM Examenes e WHERE e.idmesaexamen = me.idmesaexamen) AS cantidad')
	 		->from('MesasExamenes me')
	 		->innerJoin('me.Catedras ct ON ct.idcatedra = me.idcatedra')
	 		->innerJoin('ct.MateriasPlanes mp ON mp.idmateriaplan = ct.idmateriaplan')
   	    	->andWhere('me.idcatedra = '.$idcatedra)
   	    	->andWhere('me.idestadomesaexamen = '.$estado);
	       
		return $q->execute();		
    }	
   
  // Buscar materia si esta en el plan de estudios 
  public function buscarMateria($idmateria) 
    {
	    $q = Doctrine_Query::create()
	  		->select('mp.*')
	 		->from('MateriasPlanes mp')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->andWhere('mp.idmateria = '.$idmateria)
	    	->orderBy('mp.orden ASC');
	    	
		return $q->execute();
    }    
        
  // Obtiene todas las materias para dicho plan 
  public function obtenerMaterias($generica) 
    {
	    $q = Doctrine_Query::create()
	  		->select('mp.*, m.nombre AS nombre, mp.anodecursada AS curso')
	 		->from('MateriasPlanes mp')
	 		->innerJoin('mp.Materias m ON mp.idmateria = m.idmateria')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->andWhere('mp.generica = '.$generica)
	    	->orderBy('m.nombre ASC');
    	
		return $q->execute();
    }
    
    // Obtiene todas las materias para dicho plan
    public function obtenerComisionesConCupo($idsede)
    {
    	$arreglo = array();
    	
    	$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
			SELECT ca.idcatedra, co.idcomision, co.nombre as nombre, COUNT(DISTINCT ea.idalumno) as cantidad
			FROM comisiones co
			INNER JOIN catedras ca ON co.idcatedra=ca.idcatedra and ca.idsede=".$idsede."
			INNER JOIN materias_planes mp ON ca.idmateriaplan=mp.idmateriaplan and mp.idplanestudio=".$this->getIdplanestudio()."
			LEFT JOIN (
				SELECT *
				FROM alu_mat
				ORDER BY id, fecha
			) AS am ON co.idcomision = am.idcomision and am.idestadomateria = 1
			LEFT JOIN (
			   	SELECT * FROM (
				   	SELECT *
				   	FROM estados_alumno_historial
				   	ORDER BY fecha DESC, id DESC
				) AS eah
				GROUP BY eah.idalumno
			) AS ea ON am.idalumno = ea.idalumno AND ea.idestadoalumno=1
			GROUP BY co.idcomision;			
    	");
    	
    	foreach($q as $item) {
    		$arreglo[$item['idcatedra']][$item['idcomision']] = $item['nombre'];
    	}
    	
    	return $arreglo;    
    }    

    // Obtiene todas las materias para dicho plan
    public function obtenerTodasMaterias($order=1)
    {
    	if ($order==1) {
    		$orden = "m.nombre ASC";
    	} else {
    		$orden = "mp.anodecursada ASC, mp.orden ASC";
    	}
    	
    	$q = Doctrine_Query::create()
    		->select('mp.*, m.nombre AS nombre, mp.anodecursada AS curso')
    		->from('MateriasPlanes mp')
    		->innerJoin('mp.Materias m ON mp.idmateria = m.idmateria')
    		->where('mp.idplanestudio = '.$this->getIdplanestudio())
    		->orderBy($orden);
    	 
    	return $q->execute();
    }    

  // Obtiene todos los titulos para dicho plan
  public function obtenerTitulos()
    {
    	$q = Doctrine_Query::create()
    	->select('ti.idtitulo as idtitulo, ti.nombre as nombre, tp.idplanestudio')
    	->from('TitulosPlanes tp')
    	->innerJoin('tp.Titulos ti ON tp.idtitulo = ti.idtitulo')
    	->where('tp.idplanestudio = '.$this->getIdplanestudio())
    	->orderBy('ti.nombre ASC');
    	 
    	return $q->execute();
    }
        
  // Obtiene todas las materias genericas para dicho plan 
  public function obtenerMateriasGenericas() 
    {
	    $q = Doctrine_Query::create()
	  		->select('mp.*, m.nombre AS nombre')
	 		->from('MateriasPlanes mp')
	 		->innerJoin('mp.Materias m ON mp.idmateria = m.idmateria')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->andWhere('(mp.generica = 2) OR (mp.generica = 4)')
	    	->orderBy('m.nombre ASC');
    	
		return $q->execute();
    }
        
  // Obtiene todas las correlatividades para dicho plan 
  public function obtenerCorrelatividades() 
    {
	    $q = Doctrine_Query::create()
	  		->select('c.*, m.nombre AS nombre, mc.nombre as nombrec')
	 		->from('Correlatividades c')
	 		->innerJoin('c.MateriasPlanes mp ON c.idmateriaplan = mp.idmateriaplan')
	 		->innerJoin('c.MateriasPlanes mpc ON c.idmateriaplanc = mpc.idmateriaplan')
	 		->innerJoin('mp.Materias m ON mp.idmateria = m.idmateria')
	 		->innerJoin('mpc.Materias mc ON mpc.idmateria = mc.idmateria')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->orderBy('m.nombre ASC');
	    	
		return $q->execute();
    }    

  // Obtiene todas las catedras para un plan de estudio seleccionado 
  public function obtenerCatedras($idsede) 
    {
	    $q = Doctrine_Query::create()
			->select('c.idcatedra, m.nombre AS nombremateria, mp.anodecursada AS curso, mp.codmat AS codmat, count(c.idcatedra) as cantidad')
	 		->from('Catedras c')
	 		->innerJoin('c.MateriasPlanes mp ON c.idmateriaplan = mp.idmateriaplan')
	 		->innerJoin('mp.Materias m ON mp.idmateria = m.idmateria')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
        	//->andWhere('mp.generica = 0')
	    	->andWhere('c.idsede = '.$idsede)
	    	->andWhere('c.activa = 1')
	    	->orderBy('m.nombre ASC')
	    	->groupBy('c.idcatedra');

		return $q->execute();
    }	
  
  // Obtiene las horas semanales acumuladas de un plan de estudio 
  public function obtenerHorasAcumuladas() 
    {
	    $q = Doctrine_Query::create()
	  		->select('SUM(mp.cargahorariatotal) as horas')
	 		->from('MateriasPlanes mp')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->groupBy('mp.idplanestudio')
	    	->fetchOne();

    	if ($q) { 
    		$resultado = $q->horas;
    	} else { 
    		$resultado = 0;
    	}
		return $resultado;
    }   

  // Obtiene la cantidad de materias acumuladas de un plan de estudio 
  public function obtenerCantidadMateriasAcumuladas($tipo) 
    {
	    $q = Doctrine_Query::create()
	  		->select('COUNT(*) as cantidad')
	 		->from('MateriasPlanes mp')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->andWhere('mp.idtipomateria = '.$tipo)
	    	->fetchOne();
	    
		return $q->cantidad;
    }  

  // Obtiene la cantidad de materias genericas acumuladas de un plan de estudio 
  public function obtenerCantidadMateriasGenericas() 
    {
	    $q = Doctrine_Query::create()
	  		->select('COUNT(*) as cantidad')
	 		->from('MateriasPlanes mp')
	    	->where('mp.idplanestudio = '.$this->getIdplanestudio())
	    	->andWhere('mp.generica = 1')
	    	->fetchOne();
	    
		return $q->cantidad;
    }    

    public function obtenerAlumnosUltimoAnioAprobado() {
   
        $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
            SELECT info.idalumno, info.ciclo, info.fechaingreso, info.nombre, info.apellido, info.nrodoc, info.tipodoc, 
IF (MAX(info.quinto_completo) AND MAX(info.cuarto_completo) AND MAX(info.tercero_completo) AND MAX(info.segundo_completo) AND MAX(info.primero_completo),5,
IF (MAX(info.cuarto_completo) AND MAX(info.tercero_completo) AND MAX(info.segundo_completo) AND MAX(info.primero_completo),4,
IF ( MAX(info.tercero_completo) AND MAX(info.segundo_completo) AND MAX(info.primero_completo),3,
IF (MAX(info.segundo_completo) AND MAX(info.primero_completo),2,
IF (MAX(info.primero_completo),1,'-'))))) as tieneaprobado,
IF(MAX(info.primero_completo)=1,1, '-') as primero_aprobado,
IF(MAX(info.segundo_completo)=1,2, '-') as segundo_aprobado,
IF(MAX(info.tercero_completo)=1,3, '-') as tercero_aprobado,
IF(MAX(info.cuarto_completo)=1,4, '-') as cuarto_aprobado,
IF(MAX(info.quinto_completo)=1,5, '-') as quinto_aprobado
FROM
            (
                 SELECT a.idalumno, cl.ciclo as ciclo, a.fechaingreso, mp.anodecursada, p.nombre, p.apellido, p.nrodoc, t.descripcion as tipodoc
                    , mp2.cantidad as materias_plan_anio_cursada
                     , COUNT(DISTINCT IF( mp.anodecursada=1 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_primero
                     , COUNT(DISTINCT IF( mp.anodecursada=2 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_segundo
                     , COUNT(DISTINCT IF( mp.anodecursada=3 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_tercero
                     , COUNT(DISTINCT IF( mp.anodecursada=4 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_cuarto
                     , COUNT(DISTINCT IF( mp.anodecursada=5 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_quinto
                    , IF(COUNT(DISTINCT IF( mp.anodecursada=1 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL))=mp2.cantidad,1,0) as primero_completo
                    , IF(COUNT(DISTINCT IF( mp.anodecursada=2 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL))=mp2.cantidad,1,0) as segundo_completo
                    , IF(COUNT(DISTINCT IF( mp.anodecursada=3 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL))=mp2.cantidad,1,0) as tercero_completo
                    , IF(COUNT(DISTINCT IF( mp.anodecursada=4 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL))=mp2.cantidad,1,0) as cuarto_completo
                    , IF(COUNT(DISTINCT IF( mp.anodecursada=5 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL))=mp2.cantidad,1,0) as quinto_completo
                FROM materias_planes mp
                JOIN (SELECT anodecursada, COUNT(*) AS cantidad FROM materias_planes WHERE idplanestudio = ".$this->getIdplanestudio()." AND obligatoria = 1 GROUP BY anodecursada) as mp2 ON mp.anodecursada = mp2.anodecursada
                LEFT JOIN catedras cat ON mp.idmateriaplan = cat.idmateriaplan
                LEFT JOIN mesas_examenes me ON me.idcatedra = cat.idcatedra
                LEFT JOIN examenes e on me.idmesaexamen = e.idmesaexamen
                LEFT JOIN alumnos a on e.idalumno = a.idalumno
                LEFT JOIN personas p on a.idpersona = p.idpersona
                LEFT JOIN ciclos_lectivos cl on a.idciclolectivo = cl.id 
                LEFT JOIN tipos_documentos t on p.idtipodoc = t.idtipodoc
                WHERE 
		    a.idsede=".sfContext::getInstance()->getUser()->getProfile()->getIdsede()." AND
                    mp.idplanestudio = ".$this->getIdplanestudio()." AND 
                    mp.anodecursada > 0 AND 
                    mp.obligatoria = 1
                GROUP BY a.idalumno, mp.anodecursada 
            ) as info
            GROUP BY info.idalumno HAVING info.idalumno IS NOT NULL
            ORDER BY info.ciclo, info.apellido;
        ");

    	return $q;
 
    }

    public function obtenerCantidadesMateriasAprobadasPorPlanEstudio() {
   
        $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
            SELECT a.idalumno, cl.ciclo as ciclo, a.fechaingreso, p.nombre, p.apellido, p.nrodoc, t.descripcion as tipodoc
                    , mp2.cantidad as cantidad_materias_del_plan
                     , COUNT(DISTINCT IF( mp.anodecursada=1 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_primero
                     , COUNT(DISTINCT IF( mp.anodecursada=2 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_segundo
                     , COUNT(DISTINCT IF( mp.anodecursada=3 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_tercero
                     , COUNT(DISTINCT IF( mp.anodecursada=4 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_cuarto
                     , COUNT(DISTINCT IF( mp.anodecursada=5 AND me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as materias_ap_quinto
                     , COUNT(DISTINCT IF( me.idestadomesaexamen=4 AND (e.promedio >=4 OR me.idtipoexamen = 4), mp.idmateriaplan, NULL)) as total_aprobadas
                FROM materias_planes mp
                JOIN (SELECT COUNT(*) AS cantidad, idplanestudio FROM materias_planes WHERE idplanestudio = ".$this->getIdplanestudio()." AND idtipomateria NOT IN (2,3) AND anodecursada>0) as mp2 ON mp.idplanestudio = mp2.idplanestudio
                LEFT JOIN catedras cat ON mp.idmateriaplan = cat.idmateriaplan
                LEFT JOIN mesas_examenes me ON me.idcatedra = cat.idcatedra
                LEFT JOIN examenes e on me.idmesaexamen = e.idmesaexamen
                LEFT JOIN alumnos a on e.idalumno = a.idalumno
                LEFT JOIN personas p on a.idpersona = p.idpersona
                LEFT JOIN ciclos_lectivos cl on a.idciclolectivo = cl.id 
                LEFT JOIN tipos_documentos t on p.idtipodoc = t.idtipodoc
                WHERE 
		    a.idsede=".sfContext::getInstance()->getUser()->getProfile()->getIdsede()." AND
                    mp.idplanestudio = ".$this->getIdplanestudio()." AND 
                    mp.anodecursada > 0 AND 
                    mp.idtipomateria NOT IN (2,3) 
                GROUP BY a.idalumno HAVING a.idalumno is not null ORDER BY p.apellido, p.nombre
        ");

      return $q;
 
    }  

    public function getNombrecarrera() {
        return $this->getCarreras()->getNombre()." - ".$this->getNombre();
    }	  

    public function existePlanEnSede() {
	    $q = Doctrine_Query::create()
	  		->select('cs.*')
	 		->from('CarrerasSede cs')
	    	->where('cs.idcarrera = '.$this->getIdplanestudio())
	    	->andWhere('cs.idsede = '.sfContext::getInstance()->getUser()->getProfile()->getIdsede())
	    	->fetchOne();

    	if ($q) { 
    		$resultado = true;
    	} else { 
    		$resultado = 0;
    	}
		return $resultado;
    }
}
