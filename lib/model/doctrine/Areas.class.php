<?php

/**
 * Areas
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sig
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Areas extends BaseAreas
{
    public function __toString() {
        return $this->getDescripcion();
    }
    
	// Obtiene libros de actas del area
	public function obtenerLibrosActas() {	
	
  		$q = Doctrine_Query::create()
			->select("l.*")
	 		->from("LibrosActas l")
	    	->where("l.idarea = ".$this->getIdarea())
		->orderBy('l.descripcion ASC');

		return $q->execute();
	}
	
	// Obtiene todas las areas incluido sede central
	public function getAreas() {  	
  		$q = Doctrine_Query::create()
			->select("a.*")
	 		->from("Areas a")
	    	->where("a.idarea = 1 or a.idarea = 17 or a.idarea = 18 or a.idarea = 32 or a.idarea = 33 or a.idarea = 34");

		return $q->execute();
	}
	
	// Obtiene todas las areas excepto sede centrall
	public function obtenerAllAreas() {  	
	
		$q = Doctrine_Query::create()
			->select("a.*")
	 		->from("Areas a")
	    	->where("a.idarea = 17 or a.idarea = 18 or a.idarea = 32 or a.idarea = 33 or a.idarea = 34");

		return $q->execute();
	}

	// Obtiene todas las areas excepto sede centrall
	public function obtenerTodasLasAreas(){  	
	
		$q = Doctrine_Query::create()
			->select("a.*")
	 		->from("Areas a")
	    	->where("a.idarea = 17 or a.idarea = 18 or a.idarea = 32 or a.idarea = 33 or a.idarea = 34 or a.idarea = 1");

		return $q->execute();
	}	
	
	// Obtiene todas las cargos de un area
	public function obtenerCargos() {
	
		$q = Doctrine_Query::create()
	  		->select("tc.descripcion as descripcion, tc.idtipocargo as idtipocargo, ac.idtipoarea")
	 		->from("AreasCargos ac")
	 		->innerjoin("ac.TiposCargos tc ON ac.idtipocargo=tc.idtipocargo")
	    	->where("ac.idtipoarea =".$this->getIdtipoarea())
	    	->orderBy("tc.descripcion ASC");
	    	
		return $q->execute();
    }		
	
	// Obtiene todas las carreras de una sede
	public function obtenerCarreras() {
	
		$q = Doctrine_Query::create()
	  		->select("c.*")
	 		->from("Carreras c")
	 		->innerjoin("c.AreasCarrera ac ON c.idcarrera=ac.idcarrera")
	    	->where("ac.idarea = ".$this->getIdarea())
	    	->orderBy("c.nombre ASC");
	    	
		return $q->execute();
	}	
	
	public function obtenerInscriptosPreCicloArea($idciclo, $idarea, $idsede) {
	
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT DISTINCT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, ea.idestadoalumno idestado
    				FROM alumnos al
   					INNER JOIN (
   						SELECT * FROM (
						    SELECT *
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND
    					al.internacional = 0 AND
    					al.idsede = ".$idsede." AND
                        ac.idarea = ".$idarea." AND
    					ca.idcarrera=168 AND
				  		ea.idestadoalumno <> 6
    				ORDER BY al.idplanestudio, pe.apellido, pe.nombre
    		");

		return $q;
	}	


	public function obtenerInscriptosCursoAnticipado($idciclo, $idarea, $idsede) {
	
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT DISTINCT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, ea.idestadoalumno idestado
    				FROM alumnos al
   					INNER JOIN (
   						SELECT * FROM (
						    SELECT *
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND
    					al.internacional = 0 AND
    					al.idsede = ".$idsede." AND
                        ac.idarea = ".$idarea." AND
    					ca.idcarrera=168 AND
				  		ea.idestadoalumno <> 6
    				ORDER BY al.idplanestudio, pe.apellido, pe.nombre
    		");

		return $q;
	}	


	public function obtenerAspirantesCicloArea($idciclo, $idarea, $idsede) {  

		  $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT DISTINCT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, ea.idestadoalumno idestado 
    				FROM alumnos al
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
    					al.idsede = ".$idsede." AND 
                        ac.idarea = ".$idarea." AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 AND
			  			(ea.idestadoalumno = 1 or ea.idestadoalumno = 2) 	
    				ORDER BY al.idplanestudio, pe.apellido, pe.nombre
    		");
		  
		return $q;
	}	


	public function obtenerAspirantesCicloAcademica($idciclo) {  

		  $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, ea.idestadoalumno idestado 
    				FROM alumnos al
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 AND
			  			(ea.idestadoalumno = 1 or ea.idestadoalumno = 2) 	
    				ORDER BY al.idplanestudio, al.idsede, pe.apellido, pe.nombre
    		");
		  
		return $q;
	}	


	public function obtenerAspirantesCicloAreaAutogestion($idciclo, $idarea, $idsede) {  

		  $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, ea.idestadoalumno idestado 
    				FROM alumnos al
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial 
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
    					al.idsede = ".$idsede." AND 
                        ac.idarea = ".$idarea." AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 

    				ORDER BY al.idplanestudio, pe.apellido, pe.nombre
    		");
		  
		return $q;
	}	

	public function obtenerInformeControlGeneral($idplanestudio, $idsede) {  

		  $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, eah.idestadoalumno idestado, cl.ciclo ciclo
    				FROM alumnos al
				JOIN ( 
				     SELECT MAX(id) as id, idalumno FROM estados_alumno_historial WHERE COALESCE(idalumno,'')<>'' GROUP BY idalumno
				       ) AS info ON al.idalumno = info.idalumno
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				JOIN estados_alumno_historial eah ON info.idalumno = eah.idalumno AND info.id = eah.id    
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				INNER JOIN ciclos_lectivos cl ON al.idciclolectivo = cl.id
    				WHERE eah.idestadoalumno = 1 AND
    					al.idsede = ".$idsede." AND 
                        		pl.idplanestudio = ".$idplanestudio." 
    				ORDER BY al.idplanestudio, al.idciclolectivo, pe.apellido, pe.nombre
    		");
		  
		return $q;
	}	

	public function obtenerAlumnosEstadoArea($anio, $idarea, $idsede, $idestado) {  
		
		  $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT 
al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, eah.idestadoalumno idestado, eah.fecha fechaestado , eah.observaciones obs, con.celularnum cel
FROM alumnos al
JOIN ( 
     SELECT MAX(id) as id, idalumno FROM estados_alumno_historial WHERE COALESCE(idalumno,'')<>'' GROUP BY idalumno
       ) AS info ON al.idalumno = info.idalumno
 JOIN estados_alumno_historial eah ON info.idalumno = eah.idalumno AND info.id = eah.id             
 JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
 JOIN carreras ca ON pl.idcarrera = ca.idcarrera
 JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
 JOIN personas pe ON al.idpersona = pe.idpersona
 JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
 LEFT JOIN contactos con ON con.idpersona = pe.idpersona
 WHERE al.idciclolectivo=".$anio." AND eah.idestadoalumno = ".$idestado." AND
                        al.internacional = 0 AND 
                         al.idsede = ".$idsede." AND 
                        ac.idarea = ".$idarea."
                    ORDER BY al.idplanestudio, eah.fecha, pe.apellido, pe.nombre
    		");
		  
		return $q;
	}	

	public function obtenerAspirantesCicloAlfabetico($idciclo, $idarea, $idsede) {  
		  
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*, ea.idestadoalumno idestado 
    				FROM alumnos al
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
						al.idsede = ".$idsede." AND
    					ac.idarea = ".$idarea." AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 AND
    					ea.idestadoalumno <> 6				
    				ORDER BY al.idplanestudio ASC, pe.apellido ASC, pe.nombre ASC
    		");		
              
		return $q;
	}		

	public function obtenerAspirantesSeguroAlfabetico($idciclo, $idarea, $idsede) {  
		  
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*, ea.idestadoalumno idestado , est.*, est.descripcion as titulo, niv.descripcion as nivel, cat.descripcion as categoria, uni.descripcion as unidad, con.email as e1, con.email1 as e2 
    				FROM alumnos al  					
  					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno    					
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				LEFT JOIN contactos con ON pe.idpersona = con.idpersona
    				LEFT JOIN estudios est ON est.idpersona = pe.idpersona
					LEFT JOIN niveles_estudios niv ON est.idnivelestudio = niv.idnivelestudio
					LEFT JOIN categorias_titulos cat ON est.idcategoriatitulo = cat.idcategoriatitulo
					LEFT JOIN unidades_de_tiempo uni ON est.idunidadtiempo = uni.idunidadtiempo
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
						al.idsede = ".$idsede." AND
    					al.internacional = 0 AND 
    					ac.idarea = ".$idarea." AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 AND
    					ea.idestadoalumno <> 6				
    				ORDER BY al.idplanestudio ASC, pe.apellido, pe.nombre ASC
    		");

		return $q;
	}

/*	public function obtenerAlumnosCicloActivos($idciclo, $idarea, $idsede) {  
		  
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*, ea.idestadoalumno idestado , est.descripcion as titulo 
    				FROM alumnos al  					
  					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno    					
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
    				LEFT JOIN contactos con ON pe.idpersona = con.idpersona
    				LEFT JOIN estudios est ON est.idpersona = pe.idpersona
				LEFT JOIN bajas_alumnos ba ON ba.idalumno = al.idalumno
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
						al.idsede = ".$idsede." AND
    					al.internacional = 0 AND 
    					ac.idarea = ".$idarea." AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 AND
    					ea.idestadoalumno <> 6 AND
					isnull(ba.idbaja)			
    				ORDER BY al.idplanestudio ASC, pe.apellido, pe.nombre ASC
    		");

		return $q;
	}*/

	public function obtenerAlumnosCicloActivos($idciclo, $idarea, $idsede) {  

		  $q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*,pe.nrodoc documento, pe.apellido ape, pe.nombre nom, pe.fechanac fechanac, td.descripcion tipodoc, ca.nombre nomcar, ea.idestadoalumno idestado 
    				FROM alumnos al
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN tipos_documentos td ON pe.idtipodoc = td.idtipodoc
				LEFT JOIN bajas_alumnos ba ON ba.idalumno = al.idalumno
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
    					al.idsede = ".$idsede." AND 
                        ac.idarea = ".$idarea." AND 
    					ca.idtipocarrera <> 6 AND
    					ca.idtipocarrera <> 2 AND
			  			ea.idestadoalumno = 1 	 AND
					isnull(ba.idbaja)	
    				ORDER BY al.idplanestudio, pe.apellido, pe.nombre
    		");
		  
		return $q;
	}	

	public function obtenerAspirantesCicloComision($idciclo, $sede, $idmateria) {  
	
  		$q = Doctrine_Query::create()
			->select("a.*,am.*")
	 		->from("AluMat am")
	 		->innerjoin("am.Alumnos a on am.idalumno = a.idalumno")
	 		->innerjoin("a.Personas p on a.idpersona=p.idpersona")
	    	->where("a.idciclolectivo =".$idciclo." and a.internacional=0 and a.idsede=".$sede)
			->orderBy("am.idcomision, p.apellido");

		return $q->execute();
	}	  

	public function obtenerAspirantesCicloComisionArea($idciclo, $idarea, $idmateria) {  
		
		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT distinct al.*, am.*, ea.idestadoalumno idestado, am.idcomision idcomision 
    				FROM alu_mat am
    				INNER JOIN alumnos al ON am.idalumno = al.idalumno
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN comisiones co ON am.idcomision = co.idcomision
    				INNER JOIN catedras cat ON co.idcatedra = cat.idcatedra
    				INNER JOIN materias_planes mp ON cat.idmateriaplan = mp.idmateriaplan	
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
						mp.idplanestudio=168 AND
    					ac.idarea = ".$idarea." AND 
    					ea.idestadoalumno <> 6									
    				ORDER BY am.idcomision ASC, pe.apellido ASC
    		");

		return $q;
	}	  
	
	public function obtenerAspirantesCicloSedeArea($idciclo, $idarea, $idmateria) {  

		$q = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc("
    			SELECT al.*, am.*, al.idsede AS idsede, ea.idestadoalumno idestado 
    				FROM alu_mat am
    				INNER JOIN alumnos al ON am.idalumno = al.idalumno
   					INNER JOIN ( 
   						SELECT * FROM (
						    SELECT * 
						    FROM estados_alumno_historial
						    ORDER BY fecha DESC, id DESC
						) AS eah
						GROUP BY eah.idalumno
   					) AS ea ON al.idalumno = ea.idalumno 
    				INNER JOIN planes_estudios pl ON al.idplanestudio = pl.idplanestudio
    				INNER JOIN carreras ca ON pl.idcarrera = ca.idcarrera
    				INNER JOIN areas_carrera ac ON ca.idcarrera = ac.idcarrera
    				INNER JOIN personas pe ON al.idpersona = pe.idpersona
    				INNER JOIN comisiones co ON am.idcomision = co.idcomision
    				INNER JOIN catedras cat ON co.idcatedra = cat.idcatedra
    				INNER JOIN materias_planes mp ON cat.idmateriaplan = mp.idmateriaplan
    				WHERE
    					al.idciclolectivo = ".$idciclo." AND 
    					al.internacional = 0 AND 
    					ac.idarea = ".$idarea." AND 
    					mp.idmateria = ".$idmateria." AND
    					ea.idestadoalumno <> 6				
    				ORDER BY al.idsede, pe.apellido
    		");			
			
		return $q;
	}	  
		
	public function obtenerFacultadesPorArea($idarea) {  
	
  		$q = Doctrine_Query::create()
			->select("f.idfacultad as idfacultad, f.nombre as facultad, ac.idcarrera, c.idcarrera")
	 		->from("AreasCarrera ac")
	 		->innerjoin("ac.Carreras c on ac.idcarrera = c.idcarrera")
	 		->innerjoin("c.Facultades f on c.idfacultad = f.idfacultad")
	 		->where("ac.idarea = ".$idarea)
	 		->andWhere("c.idtipocarrera !=6")
	 		->groupBy("f.idfacultad");
	 
		return $q->execute();
	}	      
}
